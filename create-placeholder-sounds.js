/**
 * Script ƒë·ªÉ t·∫°o c√°c file √¢m thanh placeholder (silent) cho game
 * 
 * C√°ch ch·∫°y:
 * 1. C√†i ffmpeg: https://ffmpeg.org/download.html
 * 2. Ch·∫°y: node create-placeholder-sounds.js
 * 
 * Ho·∫∑c t√¨m v√† download c√°c file √¢m thanh mi·ªÖn ph√≠ t·ª´:
 * - https://freesound.org/
 * - https://mixkit.co/free-sound-effects/
 * - https://www.zapsplat.com/
 * - https://soundbible.com/
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Danh s√°ch c√°c file √¢m thanh c·∫ßn t·∫°o
const missingFiles = [
  {
    name: 'button-hover.mp3',
    description: 'Ti·∫øng hover button (r·∫•t nh·∫π, subtle)',
    duration: 0.1,
    frequency: 800
  },
  {
    name: 'button-click2.mp3',
    description: 'Ti·∫øng click button ph·ª•',
    duration: 0.15,
    frequency: 1000
  },
  {
    name: 'dice-land.mp3',
    description: 'Ti·∫øng x√∫c x·∫Øc r∆°i xu·ªëng',
    duration: 0.3,
    frequency: 500
  },
  {
    name: 'money-pay.mp3',
    description: 'Ti·∫øng tr·∫£ ti·ªÅn (h∆°i bu·ªìn h∆°n receive)',
    duration: 0.5,
    frequency: 600
  },
  {
    name: 'jail.mp3',
    description: 'Ti·∫øng v√†o t√π (dramatic)',
    duration: 1.5,
    frequency: 300
  },
  {
    name: 'win.mp3',
    description: 'Ti·∫øng th·∫Øng game (vui v·∫ª)',
    duration: 3.0,
    frequency: 1200
  },
  {
    name: 'lose.mp3',
    description: 'Ti·∫øng thua game (bu·ªìn)',
    duration: 2.0,
    frequency: 400
  },
  {
    name: 'anime-wow.mp3',
    description: 'Ti·∫øng wow anime',
    duration: 1.0,
    frequency: 900
  },
  {
    name: 'bruh.mp3',
    description: 'Ti·∫øng bruh',
    duration: 0.8,
    frequency: 700
  },
  {
    name: 'vine-boom.mp3',
    description: 'Ti·∫øng vine boom',
    duration: 0.5,
    frequency: 200
  },
  {
    name: 'background-music.mp3',
    description: 'Nh·∫°c n·ªÅn game (looping, upbeat)',
    duration: 60.0,
    frequency: 440
  }
];

const soundsDir = path.join(__dirname, 'web', 'public', 'sounds');

console.log('üéµ Panda Monopoly - Sound File Generator');
console.log('=======================================\n');

// Check if ffmpeg is available
try {
  execSync('ffmpeg -version', { stdio: 'ignore' });
  console.log('‚úÖ ffmpeg detected\n');
} catch (error) {
  console.log('‚ùå ffmpeg not found. Please install ffmpeg first:');
  console.log('   Windows: https://ffmpeg.org/download.html');
  console.log('   Mac: brew install ffmpeg');
  console.log('   Linux: sudo apt-get install ffmpeg\n');
  console.log('üìù Or manually download sound files from:');
  console.log('   - https://freesound.org/');
  console.log('   - https://mixkit.co/free-sound-effects/');
  console.log('   - https://www.zapsplat.com/\n');
  process.exit(1);
}

console.log('üìã Files needed:\n');
missingFiles.forEach((file, index) => {
  console.log(`${index + 1}. ${file.name}`);
  console.log(`   ${file.description}`);
  console.log(`   Duration: ${file.duration}s, Frequency: ${file.frequency}Hz\n`);
});

console.log('\nüí° Recommendations:');
console.log('   1. Download professional sound effects from free libraries');
console.log('   2. Use this script to generate silent placeholders for testing');
console.log('   3. Replace placeholders with real sounds later\n');

// Function to create silent audio file
function createSilentAudio(filename, duration) {
  const outputPath = path.join(soundsDir, filename);
  
  // Create silent audio with ffmpeg
  const command = `ffmpeg -f lavfi -i anullsrc=r=44100:cl=mono -t ${duration} -q:a 9 -acodec libmp3lame "${outputPath}" -y`;
  
  try {
    execSync(command, { stdio: 'ignore' });
    console.log(`‚úÖ Created: ${filename}`);
    return true;
  } catch (error) {
    console.log(`‚ùå Failed to create: ${filename}`);
    return false;
  }
}

// Ask user if they want to create silent placeholders
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

readline.question('\nüîß Create silent placeholder files for testing? (y/n): ', (answer) => {
  if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
    console.log('\nüì¶ Creating placeholder files...\n');
    
    let successCount = 0;
    missingFiles.forEach(file => {
      if (createSilentAudio(file.name, file.duration)) {
        successCount++;
      }
    });
    
    console.log(`\n‚úÖ Created ${successCount}/${missingFiles.length} placeholder files`);
    console.log('‚ö†Ô∏è  Remember to replace these with real sound effects!\n');
  } else {
    console.log('\nüìù Please download sound files manually and place them in:');
    console.log(`   ${soundsDir}\n`);
  }
  
  readline.close();
});
