<div className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full mx-4 relative overflow-hidden">
        {/* Animated background */}
        <div className="absolute inset-0 bg-gradient-to-br from-green-100 to-blue-100 opacity-30"></div>
        
        {/* Floating particles animation */}
        {animationPhase === 'drawing' && (
          <div className="absolute inset-0 pointer-events-none">
            {[...Array(20)].map((_, i) => (
              <div
                key={i}
                className="absolute w-2 h-2 bg-gradient-to-r from-purple-400 to-pink-400 rounded-full animate-ping"
                style={{
                  left: `${Math.random() * 100}%`,
                  top: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 2}s`,
                  animationDuration: `${1 + Math.random()}s`,
                }}
              />
            ))}
          </div>
        )}

        <div className="relative z-10">
          {/* Header */}
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-1">
              {cardTitle}
            </h2>
            <p className="text-sm text-gray-600 mb-2">{cardSubtitle}</p>
            <p className="text-gray-600">
              {animationPhase === 'idle' && "Draw a card to see what happens!"}
              {animationPhase === 'drawing' && "Drawing card from the blockchain..."}
              {animationPhase === 'revealing' && "Revealing your card..."}
              {animationPhase === 'complete' && "Card drawn successfully!"}
            </p>
          </div>

          {/* Card Drawing Area */}
          <div className="flex justify-center mb-6">
            {!isRolling && !showCard && (
              <div className="relative">
                {/* Card Stack Background */}
                <div className="absolute inset-0 transform rotate-2 translate-x-1 translate-y-1">
                  <div
                    className={`w-40 h-56 rounded-lg bg-gradient-to-br ${cardColor} opacity-30`}
                  ></div>
                </div>
                <div className="absolute inset-0 transform -rotate-1 translate-x-0.5 translate-y-0.5">
                  <div
                    className={`w-40 h-56 rounded-lg bg-gradient-to-br ${cardColor} opacity-50`}
                  ></div>
                </div>

              {/* Main Card */}
              <div
                className={`w-40 h-56 rounded-lg bg-gradient-to-br ${cardColor} shadow-lg cursor-pointer transform transition-all duration-500 ${
                  animationPhase === 'drawing' 
                    ? "animate-pulse scale-110 rotate-12" 
                    : animationPhase === 'revealing'
                    ? "scale-105 rotate-6"
                    : "hover:scale-105"
                } ${showCard ? "opacity-0" : "opacity-100"}`}
                onClick={animationPhase === 'idle' ? drawCard : undefined}
              >
                <div className="flex flex-col items-center justify-center h-full text-white">
                  <div className="text-4xl mb-2">{cardIcon}</div>
                  <div className="text-sm font-semibold text-center px-2">
                    {cardTitle}
                  </div>
                  {animationPhase === 'idle' && (
                    <div className="text-xs mt-2 opacity-80">Click to draw</div>
                  )}
                  {animationPhase === 'drawing' && (
                    <div className="text-xs mt-2 opacity-80 animate-pulse">
                      Processing...
                    </div>
                  )}
                </div>
              </div>

              {/* Drawing animation overlay */}
              {animationPhase === 'drawing' && (
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-white text-lg font-bold animate-bounce">
                    âš¡
                  </div>
                </div>
              </div>
            )}

            {/* Rolling Cards Animation */}
            {/* {isRolling && (
              <div className="relative w-full h-56 overflow-hidden">
                <div className="flex animate-scroll-horizontal">
                  {rollingCards.concat(rollingCards).map((card, index) => (
                    <div
                      key={`${card.title}-${index}`}
                      className={`flex-shrink-0 w-32 h-48 mx-2 rounded-lg bg-gradient-to-br ${cardColor} shadow-lg`}
                    >
                      <div className="flex flex-col items-center justify-center h-full text-white p-2">
                        <div className="text-2xl mb-1">{cardIcon}</div>
                        <div className="text-xs font-semibold text-center mb-1">
                          {card.title}
                        </div>
                        <div className="text-xs text-center opacity-80 leading-tight">
                          {card.description.length > 50 
                            ? `${card.description.substring(0, 50)}...` 
                            : card.description}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )} */}
          </div>

          {/* Drawn Card Display */}
          {showCard && drawnCard && (
            <div
              className={`transform transition-all duration-700 ${
                showCard ? "opacity-100 scale-100 translate-y-0" : "opacity-0 scale-95 translate-y-4"
              }`}
            >
              <div className="bg-white border-2 border-gray-300 rounded-lg p-4 shadow-lg">
                <div className="text-center">
                  <h3 className="text-lg font-bold text-gray-800 mb-2">
                    {drawnCard.title}
                  </h3>
                  <p className="text-gray-600 mb-4 text-sm leading-relaxed">
                    {drawnCard.description}
                  </p>

                  {/* Action indicator */}
                  {drawnCard.value !== 0 && (
                    <div
                      className={`inline-block px-3 py-1 rounded-full text-sm font-semibold ${
                        drawnCard.action.includes("collect") ||
                        drawnCard.action.includes("advance-to-go")
                          ? "bg-green-100 text-green-800"
                          : "bg-red-100 text-red-800"
                      }`}
                    >
                      {drawnCard.action.includes("collect") ||
                      drawnCard.action.includes("advance-to-go")
                        ? `+${drawnCard.value} SOL`
                        : `-${drawnCard.value} SOL`}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex justify-center gap-4 mt-6">
            {animationPhase === 'idle' && (
              <button
                onClick={drawCard}
                className={`px-6 py-3 bg-gradient-to-r ${cardColor} text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200`}
              >
                Draw Card
              </button>
            )}

            {animationPhase === 'drawing' && (
              <button
                disabled
                className="px-6 py-3 bg-gray-400 text-white font-semibold rounded-lg shadow-lg cursor-not-allowed"
              >
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Drawing...
                </div>
              </button>
            )}

            {showCard && (
              <button
                onClick={handleApplyCard}
                className="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-200"
              >
                Apply Card Effect
              </button>
            )}
          </div>

          {/* Decorative elements */}
          <div className="absolute top-2 left-2 text-2xl opacity-20 animate-bounce">
            ðŸŽ²
          </div>
          <div
            className="absolute top-2 right-2 text-2xl opacity-20 animate-bounce"
            style={{ animationDelay: "0.5s" }}
          >
            âš¡
          </div>
          <div
            className="absolute bottom-2 left-2 text-2xl opacity-20 animate-bounce"
            style={{ animationDelay: "1s" }}
          >
            ðŸ’Ž
          </div>
          <div
            className="absolute bottom-2 right-2 text-2xl opacity-20 animate-bounce"
            style={{ animationDelay: "1.5s" }}
          >
            ðŸš€
          </div>
        </div>
      </div>