/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getTradeStatusDecoder,
  getTradeStatusEncoder,
  getTradeTypeDecoder,
  getTradeTypeEncoder,
  type TradeStatus,
  type TradeStatusArgs,
  type TradeType,
  type TradeTypeArgs,
} from '../types';

export const TRADE_STATE_DISCRIMINATOR = new Uint8Array([
  18, 152, 250, 23, 138, 87, 85, 1,
]);

export function getTradeStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TRADE_STATE_DISCRIMINATOR);
}

export type TradeState = {
  discriminator: ReadonlyUint8Array;
  game: Address;
  proposer: Address;
  receiver: Address;
  tradeType: TradeType;
  proposerMoney: bigint;
  receiverMoney: bigint;
  proposerProperty: Option<number>;
  receiverProperty: Option<number>;
  status: TradeStatus;
  createdAt: bigint;
  expiresAt: bigint;
  bump: number;
};

export type TradeStateArgs = {
  game: Address;
  proposer: Address;
  receiver: Address;
  tradeType: TradeTypeArgs;
  proposerMoney: number | bigint;
  receiverMoney: number | bigint;
  proposerProperty: OptionOrNullable<number>;
  receiverProperty: OptionOrNullable<number>;
  status: TradeStatusArgs;
  createdAt: number | bigint;
  expiresAt: number | bigint;
  bump: number;
};

export function getTradeStateEncoder(): Encoder<TradeStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['game', getAddressEncoder()],
      ['proposer', getAddressEncoder()],
      ['receiver', getAddressEncoder()],
      ['tradeType', getTradeTypeEncoder()],
      ['proposerMoney', getU64Encoder()],
      ['receiverMoney', getU64Encoder()],
      ['proposerProperty', getOptionEncoder(getU8Encoder())],
      ['receiverProperty', getOptionEncoder(getU8Encoder())],
      ['status', getTradeStatusEncoder()],
      ['createdAt', getI64Encoder()],
      ['expiresAt', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TRADE_STATE_DISCRIMINATOR })
  );
}

export function getTradeStateDecoder(): Decoder<TradeState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['game', getAddressDecoder()],
    ['proposer', getAddressDecoder()],
    ['receiver', getAddressDecoder()],
    ['tradeType', getTradeTypeDecoder()],
    ['proposerMoney', getU64Decoder()],
    ['receiverMoney', getU64Decoder()],
    ['proposerProperty', getOptionDecoder(getU8Decoder())],
    ['receiverProperty', getOptionDecoder(getU8Decoder())],
    ['status', getTradeStatusDecoder()],
    ['createdAt', getI64Decoder()],
    ['expiresAt', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getTradeStateCodec(): Codec<TradeStateArgs, TradeState> {
  return combineCodec(getTradeStateEncoder(), getTradeStateDecoder());
}

export function decodeTradeState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TradeState, TAddress>;
export function decodeTradeState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TradeState, TAddress>;
export function decodeTradeState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TradeState, TAddress> | MaybeAccount<TradeState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTradeStateDecoder()
  );
}

export async function fetchTradeState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TradeState, TAddress>> {
  const maybeAccount = await fetchMaybeTradeState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTradeState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TradeState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTradeState(maybeAccount);
}

export async function fetchAllTradeState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TradeState>[]> {
  const maybeAccounts = await fetchAllMaybeTradeState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTradeState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TradeState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTradeState(maybeAccount));
}
