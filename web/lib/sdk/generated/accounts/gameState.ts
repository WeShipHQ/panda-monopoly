/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getGameStatusDecoder,
  getGameStatusEncoder,
  type GameStatus,
  type GameStatusArgs,
} from '../types';

export const GAME_STATE_DISCRIMINATOR = new Uint8Array([
  144, 94, 208, 172, 248, 99, 134, 120,
]);

export function getGameStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(GAME_STATE_DISCRIMINATOR);
}

export type GameState = {
  discriminator: ReadonlyUint8Array;
  gameId: bigint;
  authority: Address;
  bump: number;
  maxPlayers: number;
  currentPlayers: number;
  currentTurn: number;
  players: Array<Address>;
  createdAt: bigint;
  isActive: boolean;
  gameStatus: GameStatus;
  diceResult: ReadonlyUint8Array;
  bankBalance: bigint;
  freeParkingPool: bigint;
  housesRemaining: number;
  hotelsRemaining: number;
  timeLimit: Option<bigint>;
  winner: Option<Address>;
  turnStartedAt: bigint;
};

export type GameStateArgs = {
  gameId: number | bigint;
  authority: Address;
  bump: number;
  maxPlayers: number;
  currentPlayers: number;
  currentTurn: number;
  players: Array<Address>;
  createdAt: number | bigint;
  isActive: boolean;
  gameStatus: GameStatusArgs;
  diceResult: ReadonlyUint8Array;
  bankBalance: number | bigint;
  freeParkingPool: number | bigint;
  housesRemaining: number;
  hotelsRemaining: number;
  timeLimit: OptionOrNullable<number | bigint>;
  winner: OptionOrNullable<Address>;
  turnStartedAt: number | bigint;
};

export function getGameStateEncoder(): Encoder<GameStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['gameId', getU64Encoder()],
      ['authority', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['maxPlayers', getU8Encoder()],
      ['currentPlayers', getU8Encoder()],
      ['currentTurn', getU8Encoder()],
      ['players', getArrayEncoder(getAddressEncoder())],
      ['createdAt', getI64Encoder()],
      ['isActive', getBooleanEncoder()],
      ['gameStatus', getGameStatusEncoder()],
      ['diceResult', fixEncoderSize(getBytesEncoder(), 2)],
      ['bankBalance', getU64Encoder()],
      ['freeParkingPool', getU64Encoder()],
      ['housesRemaining', getU8Encoder()],
      ['hotelsRemaining', getU8Encoder()],
      ['timeLimit', getOptionEncoder(getI64Encoder())],
      ['winner', getOptionEncoder(getAddressEncoder())],
      ['turnStartedAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: GAME_STATE_DISCRIMINATOR })
  );
}

export function getGameStateDecoder(): Decoder<GameState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['gameId', getU64Decoder()],
    ['authority', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['maxPlayers', getU8Decoder()],
    ['currentPlayers', getU8Decoder()],
    ['currentTurn', getU8Decoder()],
    ['players', getArrayDecoder(getAddressDecoder())],
    ['createdAt', getI64Decoder()],
    ['isActive', getBooleanDecoder()],
    ['gameStatus', getGameStatusDecoder()],
    ['diceResult', fixDecoderSize(getBytesDecoder(), 2)],
    ['bankBalance', getU64Decoder()],
    ['freeParkingPool', getU64Decoder()],
    ['housesRemaining', getU8Decoder()],
    ['hotelsRemaining', getU8Decoder()],
    ['timeLimit', getOptionDecoder(getI64Decoder())],
    ['winner', getOptionDecoder(getAddressDecoder())],
    ['turnStartedAt', getI64Decoder()],
  ]);
}

export function getGameStateCodec(): Codec<GameStateArgs, GameState> {
  return combineCodec(getGameStateEncoder(), getGameStateDecoder());
}

export function decodeGameState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GameState, TAddress>;
export function decodeGameState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GameState, TAddress>;
export function decodeGameState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GameState, TAddress> | MaybeAccount<GameState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGameStateDecoder()
  );
}

export async function fetchGameState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GameState, TAddress>> {
  const maybeAccount = await fetchMaybeGameState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGameState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GameState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGameState(maybeAccount);
}

export async function fetchAllGameState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GameState>[]> {
  const maybeAccounts = await fetchAllMaybeGameState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGameState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GameState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGameState(maybeAccount));
}
