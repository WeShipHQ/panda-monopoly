/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getGameEndReasonDecoder,
  getGameEndReasonEncoder,
  getGameStatusDecoder,
  getGameStatusEncoder,
  getPropertyInfoDecoder,
  getPropertyInfoEncoder,
  getTradeInfoDecoder,
  getTradeInfoEncoder,
  type GameEndReason,
  type GameEndReasonArgs,
  type GameStatus,
  type GameStatusArgs,
  type PropertyInfo,
  type PropertyInfoArgs,
  type TradeInfo,
  type TradeInfoArgs,
} from '../types';

export const GAME_STATE_DISCRIMINATOR = new Uint8Array([
  144, 94, 208, 172, 248, 99, 134, 120,
]);

export function getGameStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(GAME_STATE_DISCRIMINATOR);
}

export type GameState = {
  discriminator: ReadonlyUint8Array;
  gameId: bigint;
  configId: Address;
  creator: Address;
  bump: number;
  maxPlayers: number;
  currentPlayers: number;
  currentTurn: number;
  players: Array<Address>;
  playerEliminated: Array<boolean>;
  totalPlayers: number;
  activePlayers: number;
  gameStatus: GameStatus;
  bankBalance: bigint;
  freeParkingPool: bigint;
  housesRemaining: number;
  hotelsRemaining: number;
  winner: Option<Address>;
  entryFee: bigint;
  tokenMint: Option<Address>;
  tokenVault: Option<Address>;
  totalPrizePool: bigint;
  prizeClaimed: boolean;
  endConditionMet: boolean;
  endReason: Option<GameEndReason>;
  activeTrades: Array<TradeInfo>;
  nextTradeId: number;
  properties: Array<PropertyInfo>;
  createdAt: bigint;
  startedAt: Option<bigint>;
  endedAt: Option<bigint>;
  gameEndTime: Option<bigint>;
  turnStartedAt: bigint;
  timeLimit: Option<bigint>;
  turnTimeoutSeconds: bigint;
  turnGracePeriodSeconds: bigint;
  timeoutEnforcementEnabled: boolean;
};

export type GameStateArgs = {
  gameId: number | bigint;
  configId: Address;
  creator: Address;
  bump: number;
  maxPlayers: number;
  currentPlayers: number;
  currentTurn: number;
  players: Array<Address>;
  playerEliminated: Array<boolean>;
  totalPlayers: number;
  activePlayers: number;
  gameStatus: GameStatusArgs;
  bankBalance: number | bigint;
  freeParkingPool: number | bigint;
  housesRemaining: number;
  hotelsRemaining: number;
  winner: OptionOrNullable<Address>;
  entryFee: number | bigint;
  tokenMint: OptionOrNullable<Address>;
  tokenVault: OptionOrNullable<Address>;
  totalPrizePool: number | bigint;
  prizeClaimed: boolean;
  endConditionMet: boolean;
  endReason: OptionOrNullable<GameEndReasonArgs>;
  activeTrades: Array<TradeInfoArgs>;
  nextTradeId: number;
  properties: Array<PropertyInfoArgs>;
  createdAt: number | bigint;
  startedAt: OptionOrNullable<number | bigint>;
  endedAt: OptionOrNullable<number | bigint>;
  gameEndTime: OptionOrNullable<number | bigint>;
  turnStartedAt: number | bigint;
  timeLimit: OptionOrNullable<number | bigint>;
  turnTimeoutSeconds: number | bigint;
  turnGracePeriodSeconds: number | bigint;
  timeoutEnforcementEnabled: boolean;
};

export function getGameStateEncoder(): Encoder<GameStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['gameId', getU64Encoder()],
      ['configId', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['maxPlayers', getU8Encoder()],
      ['currentPlayers', getU8Encoder()],
      ['currentTurn', getU8Encoder()],
      ['players', getArrayEncoder(getAddressEncoder())],
      ['playerEliminated', getArrayEncoder(getBooleanEncoder())],
      ['totalPlayers', getU8Encoder()],
      ['activePlayers', getU8Encoder()],
      ['gameStatus', getGameStatusEncoder()],
      ['bankBalance', getU64Encoder()],
      ['freeParkingPool', getU64Encoder()],
      ['housesRemaining', getU8Encoder()],
      ['hotelsRemaining', getU8Encoder()],
      ['winner', getOptionEncoder(getAddressEncoder())],
      ['entryFee', getU64Encoder()],
      ['tokenMint', getOptionEncoder(getAddressEncoder())],
      ['tokenVault', getOptionEncoder(getAddressEncoder())],
      ['totalPrizePool', getU64Encoder()],
      ['prizeClaimed', getBooleanEncoder()],
      ['endConditionMet', getBooleanEncoder()],
      ['endReason', getOptionEncoder(getGameEndReasonEncoder())],
      ['activeTrades', getArrayEncoder(getTradeInfoEncoder())],
      ['nextTradeId', getU8Encoder()],
      ['properties', getArrayEncoder(getPropertyInfoEncoder(), { size: 40 })],
      ['createdAt', getI64Encoder()],
      ['startedAt', getOptionEncoder(getI64Encoder())],
      ['endedAt', getOptionEncoder(getI64Encoder())],
      ['gameEndTime', getOptionEncoder(getI64Encoder())],
      ['turnStartedAt', getI64Encoder()],
      ['timeLimit', getOptionEncoder(getI64Encoder())],
      ['turnTimeoutSeconds', getU64Encoder()],
      ['turnGracePeriodSeconds', getU64Encoder()],
      ['timeoutEnforcementEnabled', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: GAME_STATE_DISCRIMINATOR })
  );
}

export function getGameStateDecoder(): Decoder<GameState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['gameId', getU64Decoder()],
    ['configId', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['maxPlayers', getU8Decoder()],
    ['currentPlayers', getU8Decoder()],
    ['currentTurn', getU8Decoder()],
    ['players', getArrayDecoder(getAddressDecoder())],
    ['playerEliminated', getArrayDecoder(getBooleanDecoder())],
    ['totalPlayers', getU8Decoder()],
    ['activePlayers', getU8Decoder()],
    ['gameStatus', getGameStatusDecoder()],
    ['bankBalance', getU64Decoder()],
    ['freeParkingPool', getU64Decoder()],
    ['housesRemaining', getU8Decoder()],
    ['hotelsRemaining', getU8Decoder()],
    ['winner', getOptionDecoder(getAddressDecoder())],
    ['entryFee', getU64Decoder()],
    ['tokenMint', getOptionDecoder(getAddressDecoder())],
    ['tokenVault', getOptionDecoder(getAddressDecoder())],
    ['totalPrizePool', getU64Decoder()],
    ['prizeClaimed', getBooleanDecoder()],
    ['endConditionMet', getBooleanDecoder()],
    ['endReason', getOptionDecoder(getGameEndReasonDecoder())],
    ['activeTrades', getArrayDecoder(getTradeInfoDecoder())],
    ['nextTradeId', getU8Decoder()],
    ['properties', getArrayDecoder(getPropertyInfoDecoder(), { size: 40 })],
    ['createdAt', getI64Decoder()],
    ['startedAt', getOptionDecoder(getI64Decoder())],
    ['endedAt', getOptionDecoder(getI64Decoder())],
    ['gameEndTime', getOptionDecoder(getI64Decoder())],
    ['turnStartedAt', getI64Decoder()],
    ['timeLimit', getOptionDecoder(getI64Decoder())],
    ['turnTimeoutSeconds', getU64Decoder()],
    ['turnGracePeriodSeconds', getU64Decoder()],
    ['timeoutEnforcementEnabled', getBooleanDecoder()],
  ]);
}

export function getGameStateCodec(): Codec<GameStateArgs, GameState> {
  return combineCodec(getGameStateEncoder(), getGameStateDecoder());
}

export function decodeGameState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GameState, TAddress>;
export function decodeGameState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GameState, TAddress>;
export function decodeGameState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GameState, TAddress> | MaybeAccount<GameState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGameStateDecoder()
  );
}

export async function fetchGameState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GameState, TAddress>> {
  const maybeAccount = await fetchMaybeGameState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGameState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GameState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGameState(maybeAccount);
}

export async function fetchAllGameState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GameState>[]> {
  const maybeAccounts = await fetchAllMaybeGameState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGameState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GameState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGameState(maybeAccount));
}
