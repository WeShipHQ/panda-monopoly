/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getColorGroupDecoder,
  getColorGroupEncoder,
  getPropertyTypeDecoder,
  getPropertyTypeEncoder,
  type ColorGroup,
  type ColorGroupArgs,
  type PropertyType,
  type PropertyTypeArgs,
} from '../types';

export const PROPERTY_STATE_DISCRIMINATOR = new Uint8Array([
  207, 94, 222, 94, 178, 10, 5, 93,
]);

export function getPropertyStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROPERTY_STATE_DISCRIMINATOR
  );
}

export type PropertyState = {
  discriminator: ReadonlyUint8Array;
  position: number;
  owner: Option<Address>;
  price: number;
  colorGroup: ColorGroup;
  propertyType: PropertyType;
  houses: number;
  hasHotel: boolean;
  isMortgaged: boolean;
  rentBase: number;
  rentWithColorGroup: number;
  rentWithHouses: Array<number>;
  rentWithHotel: number;
  houseCost: number;
  mortgageValue: number;
  lastRentPaid: bigint;
};

export type PropertyStateArgs = {
  position: number;
  owner: OptionOrNullable<Address>;
  price: number;
  colorGroup: ColorGroupArgs;
  propertyType: PropertyTypeArgs;
  houses: number;
  hasHotel: boolean;
  isMortgaged: boolean;
  rentBase: number;
  rentWithColorGroup: number;
  rentWithHouses: Array<number>;
  rentWithHotel: number;
  houseCost: number;
  mortgageValue: number;
  lastRentPaid: number | bigint;
};

export function getPropertyStateEncoder(): Encoder<PropertyStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['position', getU8Encoder()],
      ['owner', getOptionEncoder(getAddressEncoder())],
      ['price', getU16Encoder()],
      ['colorGroup', getColorGroupEncoder()],
      ['propertyType', getPropertyTypeEncoder()],
      ['houses', getU8Encoder()],
      ['hasHotel', getBooleanEncoder()],
      ['isMortgaged', getBooleanEncoder()],
      ['rentBase', getU16Encoder()],
      ['rentWithColorGroup', getU16Encoder()],
      ['rentWithHouses', getArrayEncoder(getU16Encoder(), { size: 4 })],
      ['rentWithHotel', getU16Encoder()],
      ['houseCost', getU16Encoder()],
      ['mortgageValue', getU16Encoder()],
      ['lastRentPaid', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PROPERTY_STATE_DISCRIMINATOR })
  );
}

export function getPropertyStateDecoder(): Decoder<PropertyState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['position', getU8Decoder()],
    ['owner', getOptionDecoder(getAddressDecoder())],
    ['price', getU16Decoder()],
    ['colorGroup', getColorGroupDecoder()],
    ['propertyType', getPropertyTypeDecoder()],
    ['houses', getU8Decoder()],
    ['hasHotel', getBooleanDecoder()],
    ['isMortgaged', getBooleanDecoder()],
    ['rentBase', getU16Decoder()],
    ['rentWithColorGroup', getU16Decoder()],
    ['rentWithHouses', getArrayDecoder(getU16Decoder(), { size: 4 })],
    ['rentWithHotel', getU16Decoder()],
    ['houseCost', getU16Decoder()],
    ['mortgageValue', getU16Decoder()],
    ['lastRentPaid', getI64Decoder()],
  ]);
}

export function getPropertyStateCodec(): Codec<
  PropertyStateArgs,
  PropertyState
> {
  return combineCodec(getPropertyStateEncoder(), getPropertyStateDecoder());
}

export function decodePropertyState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PropertyState, TAddress>;
export function decodePropertyState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PropertyState, TAddress>;
export function decodePropertyState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PropertyState, TAddress> | MaybeAccount<PropertyState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPropertyStateDecoder()
  );
}

export async function fetchPropertyState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PropertyState, TAddress>> {
  const maybeAccount = await fetchMaybePropertyState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePropertyState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PropertyState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePropertyState(maybeAccount);
}

export async function fetchAllPropertyState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PropertyState>[]> {
  const maybeAccounts = await fetchAllMaybePropertyState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePropertyState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PropertyState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePropertyState(maybeAccount));
}
