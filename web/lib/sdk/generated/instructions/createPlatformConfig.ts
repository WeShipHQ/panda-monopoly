/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_PLATFORM_CONFIG_DISCRIMINATOR = new Uint8Array([
  176, 90, 196, 175, 253, 113, 220, 20,
]);

export function getCreatePlatformConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_PLATFORM_CONFIG_DISCRIMINATOR
  );
}

export type CreatePlatformConfigInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreatePlatformConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  platformId: Address;
  feeBasisPoints: number;
  feeVault: Address;
};

export type CreatePlatformConfigInstructionDataArgs = {
  platformId: Address;
  feeBasisPoints: number;
  feeVault: Address;
};

export function getCreatePlatformConfigInstructionDataEncoder(): FixedSizeEncoder<CreatePlatformConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['platformId', getAddressEncoder()],
      ['feeBasisPoints', getU16Encoder()],
      ['feeVault', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_PLATFORM_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getCreatePlatformConfigInstructionDataDecoder(): FixedSizeDecoder<CreatePlatformConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['platformId', getAddressDecoder()],
    ['feeBasisPoints', getU16Decoder()],
    ['feeVault', getAddressDecoder()],
  ]);
}

export function getCreatePlatformConfigInstructionDataCodec(): FixedSizeCodec<
  CreatePlatformConfigInstructionDataArgs,
  CreatePlatformConfigInstructionData
> {
  return combineCodec(
    getCreatePlatformConfigInstructionDataEncoder(),
    getCreatePlatformConfigInstructionDataDecoder()
  );
}

export type CreatePlatformConfigAsyncInput<
  TAccountAdmin extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  config?: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  platformId: CreatePlatformConfigInstructionDataArgs['platformId'];
  feeBasisPoints: CreatePlatformConfigInstructionDataArgs['feeBasisPoints'];
  feeVault: CreatePlatformConfigInstructionDataArgs['feeVault'];
};

export async function getCreatePlatformConfigInstructionAsync<
  TAccountAdmin extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CreatePlatformConfigAsyncInput<
    TAccountAdmin,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreatePlatformConfigInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 108, 97, 116, 102, 111, 114, 109])
        ),
        getAddressEncoder().encode(expectSome(args.platformId)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreatePlatformConfigInstructionDataEncoder().encode(
      args as CreatePlatformConfigInstructionDataArgs
    ),
    programAddress,
  } as CreatePlatformConfigInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountSystemProgram
  >);
}

export type CreatePlatformConfigInput<
  TAccountAdmin extends string = string,
  TAccountConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  config: Address<TAccountConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  platformId: CreatePlatformConfigInstructionDataArgs['platformId'];
  feeBasisPoints: CreatePlatformConfigInstructionDataArgs['feeBasisPoints'];
  feeVault: CreatePlatformConfigInstructionDataArgs['feeVault'];
};

export function getCreatePlatformConfigInstruction<
  TAccountAdmin extends string,
  TAccountConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CreatePlatformConfigInput<
    TAccountAdmin,
    TAccountConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreatePlatformConfigInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreatePlatformConfigInstructionDataEncoder().encode(
      args as CreatePlatformConfigInstructionDataArgs
    ),
    programAddress,
  } as CreatePlatformConfigInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountSystemProgram
  >);
}

export type ParsedCreatePlatformConfigInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    config: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: CreatePlatformConfigInstructionData;
};

export function parseCreatePlatformConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreatePlatformConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      config: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreatePlatformConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
