/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INIT_PROPERTY_HANDLER_DISCRIMINATOR = new Uint8Array([
  213, 138, 105, 52, 19, 55, 48, 57,
]);

export function getInitPropertyHandlerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INIT_PROPERTY_HANDLER_DISCRIMINATOR
  );
}

export type InitPropertyHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountPropertyState extends string | AccountMeta<string> = string,
  TAccountPropertyBufferAccount extends string | AccountMeta<string> = string,
  TAccountPropertyDelegationRecordAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountPropertyDelegationMetadataAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountDelegationProgram extends
    | string
    | AccountMeta<string> = 'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh',
  TAccountOwnerProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPropertyState extends string
        ? WritableAccount<TAccountPropertyState>
        : TAccountPropertyState,
      TAccountPropertyBufferAccount extends string
        ? WritableAccount<TAccountPropertyBufferAccount>
        : TAccountPropertyBufferAccount,
      TAccountPropertyDelegationRecordAccount extends string
        ? WritableAccount<TAccountPropertyDelegationRecordAccount>
        : TAccountPropertyDelegationRecordAccount,
      TAccountPropertyDelegationMetadataAccount extends string
        ? WritableAccount<TAccountPropertyDelegationMetadataAccount>
        : TAccountPropertyDelegationMetadataAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountDelegationProgram extends string
        ? ReadonlyAccount<TAccountDelegationProgram>
        : TAccountDelegationProgram,
      TAccountOwnerProgram extends string
        ? ReadonlyAccount<TAccountOwnerProgram>
        : TAccountOwnerProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitPropertyHandlerInstructionData = {
  discriminator: ReadonlyUint8Array;
  gameKey: Address;
  position: number;
};

export type InitPropertyHandlerInstructionDataArgs = {
  gameKey: Address;
  position: number;
};

export function getInitPropertyHandlerInstructionDataEncoder(): FixedSizeEncoder<InitPropertyHandlerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['gameKey', getAddressEncoder()],
      ['position', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INIT_PROPERTY_HANDLER_DISCRIMINATOR,
    })
  );
}

export function getInitPropertyHandlerInstructionDataDecoder(): FixedSizeDecoder<InitPropertyHandlerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['gameKey', getAddressDecoder()],
    ['position', getU8Decoder()],
  ]);
}

export function getInitPropertyHandlerInstructionDataCodec(): FixedSizeCodec<
  InitPropertyHandlerInstructionDataArgs,
  InitPropertyHandlerInstructionData
> {
  return combineCodec(
    getInitPropertyHandlerInstructionDataEncoder(),
    getInitPropertyHandlerInstructionDataDecoder()
  );
}

export type InitPropertyHandlerAsyncInput<
  TAccountPropertyState extends string = string,
  TAccountPropertyBufferAccount extends string = string,
  TAccountPropertyDelegationRecordAccount extends string = string,
  TAccountPropertyDelegationMetadataAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountDelegationProgram extends string = string,
  TAccountOwnerProgram extends string = string,
> = {
  propertyState?: Address<TAccountPropertyState>;
  propertyBufferAccount: Address<TAccountPropertyBufferAccount>;
  propertyDelegationRecordAccount: Address<TAccountPropertyDelegationRecordAccount>;
  propertyDelegationMetadataAccount: Address<TAccountPropertyDelegationMetadataAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  delegationProgram?: Address<TAccountDelegationProgram>;
  ownerProgram: Address<TAccountOwnerProgram>;
  gameKey: InitPropertyHandlerInstructionDataArgs['gameKey'];
  position: InitPropertyHandlerInstructionDataArgs['position'];
};

export async function getInitPropertyHandlerInstructionAsync<
  TAccountPropertyState extends string,
  TAccountPropertyBufferAccount extends string,
  TAccountPropertyDelegationRecordAccount extends string,
  TAccountPropertyDelegationMetadataAccount extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountDelegationProgram extends string,
  TAccountOwnerProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: InitPropertyHandlerAsyncInput<
    TAccountPropertyState,
    TAccountPropertyBufferAccount,
    TAccountPropertyDelegationRecordAccount,
    TAccountPropertyDelegationMetadataAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountDelegationProgram,
    TAccountOwnerProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitPropertyHandlerInstruction<
    TProgramAddress,
    TAccountPropertyState,
    TAccountPropertyBufferAccount,
    TAccountPropertyDelegationRecordAccount,
    TAccountPropertyDelegationMetadataAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountDelegationProgram,
    TAccountOwnerProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    propertyState: { value: input.propertyState ?? null, isWritable: true },
    propertyBufferAccount: {
      value: input.propertyBufferAccount ?? null,
      isWritable: true,
    },
    propertyDelegationRecordAccount: {
      value: input.propertyDelegationRecordAccount ?? null,
      isWritable: true,
    },
    propertyDelegationMetadataAccount: {
      value: input.propertyDelegationMetadataAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    delegationProgram: {
      value: input.delegationProgram ?? null,
      isWritable: false,
    },
    ownerProgram: { value: input.ownerProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.propertyState.value) {
    accounts.propertyState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 114, 111, 112, 101, 114, 116, 121])
        ),
        getAddressEncoder().encode(expectSome(args.gameKey)),
        getU8Encoder().encode(expectSome(args.position)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.delegationProgram.value) {
    accounts.delegationProgram.value =
      'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh' as Address<'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.propertyState),
      getAccountMeta(accounts.propertyBufferAccount),
      getAccountMeta(accounts.propertyDelegationRecordAccount),
      getAccountMeta(accounts.propertyDelegationMetadataAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.delegationProgram),
      getAccountMeta(accounts.ownerProgram),
    ],
    data: getInitPropertyHandlerInstructionDataEncoder().encode(
      args as InitPropertyHandlerInstructionDataArgs
    ),
    programAddress,
  } as InitPropertyHandlerInstruction<
    TProgramAddress,
    TAccountPropertyState,
    TAccountPropertyBufferAccount,
    TAccountPropertyDelegationRecordAccount,
    TAccountPropertyDelegationMetadataAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountDelegationProgram,
    TAccountOwnerProgram
  >);
}

export type InitPropertyHandlerInput<
  TAccountPropertyState extends string = string,
  TAccountPropertyBufferAccount extends string = string,
  TAccountPropertyDelegationRecordAccount extends string = string,
  TAccountPropertyDelegationMetadataAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountDelegationProgram extends string = string,
  TAccountOwnerProgram extends string = string,
> = {
  propertyState: Address<TAccountPropertyState>;
  propertyBufferAccount: Address<TAccountPropertyBufferAccount>;
  propertyDelegationRecordAccount: Address<TAccountPropertyDelegationRecordAccount>;
  propertyDelegationMetadataAccount: Address<TAccountPropertyDelegationMetadataAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  delegationProgram?: Address<TAccountDelegationProgram>;
  ownerProgram: Address<TAccountOwnerProgram>;
  gameKey: InitPropertyHandlerInstructionDataArgs['gameKey'];
  position: InitPropertyHandlerInstructionDataArgs['position'];
};

export function getInitPropertyHandlerInstruction<
  TAccountPropertyState extends string,
  TAccountPropertyBufferAccount extends string,
  TAccountPropertyDelegationRecordAccount extends string,
  TAccountPropertyDelegationMetadataAccount extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountDelegationProgram extends string,
  TAccountOwnerProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: InitPropertyHandlerInput<
    TAccountPropertyState,
    TAccountPropertyBufferAccount,
    TAccountPropertyDelegationRecordAccount,
    TAccountPropertyDelegationMetadataAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountDelegationProgram,
    TAccountOwnerProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitPropertyHandlerInstruction<
  TProgramAddress,
  TAccountPropertyState,
  TAccountPropertyBufferAccount,
  TAccountPropertyDelegationRecordAccount,
  TAccountPropertyDelegationMetadataAccount,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountDelegationProgram,
  TAccountOwnerProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    propertyState: { value: input.propertyState ?? null, isWritable: true },
    propertyBufferAccount: {
      value: input.propertyBufferAccount ?? null,
      isWritable: true,
    },
    propertyDelegationRecordAccount: {
      value: input.propertyDelegationRecordAccount ?? null,
      isWritable: true,
    },
    propertyDelegationMetadataAccount: {
      value: input.propertyDelegationMetadataAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    delegationProgram: {
      value: input.delegationProgram ?? null,
      isWritable: false,
    },
    ownerProgram: { value: input.ownerProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.delegationProgram.value) {
    accounts.delegationProgram.value =
      'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh' as Address<'DELeGGvXpWV2fqJUhqcF5ZSYMS4JTLjteaAMARRSaeSh'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.propertyState),
      getAccountMeta(accounts.propertyBufferAccount),
      getAccountMeta(accounts.propertyDelegationRecordAccount),
      getAccountMeta(accounts.propertyDelegationMetadataAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.delegationProgram),
      getAccountMeta(accounts.ownerProgram),
    ],
    data: getInitPropertyHandlerInstructionDataEncoder().encode(
      args as InitPropertyHandlerInstructionDataArgs
    ),
    programAddress,
  } as InitPropertyHandlerInstruction<
    TProgramAddress,
    TAccountPropertyState,
    TAccountPropertyBufferAccount,
    TAccountPropertyDelegationRecordAccount,
    TAccountPropertyDelegationMetadataAccount,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountDelegationProgram,
    TAccountOwnerProgram
  >);
}

export type ParsedInitPropertyHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    propertyState: TAccountMetas[0];
    propertyBufferAccount: TAccountMetas[1];
    propertyDelegationRecordAccount: TAccountMetas[2];
    propertyDelegationMetadataAccount: TAccountMetas[3];
    authority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    delegationProgram: TAccountMetas[6];
    ownerProgram: TAccountMetas[7];
  };
  data: InitPropertyHandlerInstructionData;
};

export function parseInitPropertyHandlerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitPropertyHandlerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      propertyState: getNextAccount(),
      propertyBufferAccount: getNextAccount(),
      propertyDelegationRecordAccount: getNextAccount(),
      propertyDelegationMetadataAccount: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      delegationProgram: getNextAccount(),
      ownerProgram: getNextAccount(),
    },
    data: getInitPropertyHandlerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
