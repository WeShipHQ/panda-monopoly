/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const JOIN_GAME_DISCRIMINATOR = new Uint8Array([
  107, 112, 18, 38, 56, 173, 60, 128,
]);

export function getJoinGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(JOIN_GAME_DISCRIMINATOR);
}

export type JoinGameInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountPlayerState extends string | AccountMeta<string> = string,
  TAccountPlayer extends string | AccountMeta<string> = string,
  TAccountGameAuthority extends string | AccountMeta<string> = string,
  TAccountTokenMint extends string | AccountMeta<string> = string,
  TAccountPlayerTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            AccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountGameAuthority extends string
        ? ReadonlyAccount<TAccountGameAuthority>
        : TAccountGameAuthority,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountPlayerTokenAccount extends string
        ? WritableAccount<TAccountPlayerTokenAccount>
        : TAccountPlayerTokenAccount,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type JoinGameInstructionData = { discriminator: ReadonlyUint8Array };

export type JoinGameInstructionDataArgs = {};

export function getJoinGameInstructionDataEncoder(): FixedSizeEncoder<JoinGameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: JOIN_GAME_DISCRIMINATOR })
  );
}

export function getJoinGameInstructionDataDecoder(): FixedSizeDecoder<JoinGameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getJoinGameInstructionDataCodec(): FixedSizeCodec<
  JoinGameInstructionDataArgs,
  JoinGameInstructionData
> {
  return combineCodec(
    getJoinGameInstructionDataEncoder(),
    getJoinGameInstructionDataDecoder()
  );
}

export type JoinGameAsyncInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountGameAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPlayerTokenAccount extends string = string,
  TAccountTokenVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState?: Address<TAccountPlayerState>;
  player: TransactionSigner<TAccountPlayer>;
  gameAuthority: Address<TAccountGameAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  playerTokenAccount?: Address<TAccountPlayerTokenAccount>;
  tokenVault?: Address<TAccountTokenVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
};

export async function getJoinGameInstructionAsync<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountGameAuthority extends string,
  TAccountTokenMint extends string,
  TAccountPlayerTokenAccount extends string,
  TAccountTokenVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: JoinGameAsyncInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountPlayerTokenAccount,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  JoinGameInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountPlayerTokenAccount,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    gameAuthority: { value: input.gameAuthority ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    playerTokenAccount: {
      value: input.playerTokenAccount ?? null,
      isWritable: true,
    },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.playerState.value) {
    accounts.playerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.player.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.playerTokenAccount.value) {
    accounts.playerTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.player.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenVault.value) {
    accounts.tokenVault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.gameAuthority.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.gameAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.playerTokenAccount),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getJoinGameInstructionDataEncoder().encode({}),
    programAddress,
  } as JoinGameInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountPlayerTokenAccount,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type JoinGameInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountGameAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountPlayerTokenAccount extends string = string,
  TAccountTokenVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState: Address<TAccountPlayerState>;
  player: TransactionSigner<TAccountPlayer>;
  gameAuthority: Address<TAccountGameAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  playerTokenAccount: Address<TAccountPlayerTokenAccount>;
  tokenVault: Address<TAccountTokenVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
};

export function getJoinGameInstruction<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountGameAuthority extends string,
  TAccountTokenMint extends string,
  TAccountPlayerTokenAccount extends string,
  TAccountTokenVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: JoinGameInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountPlayerTokenAccount,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): JoinGameInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountPlayerState,
  TAccountPlayer,
  TAccountGameAuthority,
  TAccountTokenMint,
  TAccountPlayerTokenAccount,
  TAccountTokenVault,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    gameAuthority: { value: input.gameAuthority ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    playerTokenAccount: {
      value: input.playerTokenAccount ?? null,
      isWritable: true,
    },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.gameAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.playerTokenAccount),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getJoinGameInstructionDataEncoder().encode({}),
    programAddress,
  } as JoinGameInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountPlayerTokenAccount,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type ParsedJoinGameInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    playerState: TAccountMetas[1];
    player: TAccountMetas[2];
    gameAuthority: TAccountMetas[3];
    tokenMint: TAccountMetas[4];
    playerTokenAccount: TAccountMetas[5];
    tokenVault: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    clock: TAccountMetas[10];
  };
  data: JoinGameInstructionData;
};

export function parseJoinGameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedJoinGameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      playerState: getNextAccount(),
      player: getNextAccount(),
      gameAuthority: getNextAccount(),
      tokenMint: getNextAccount(),
      playerTokenAccount: getNextAccount(),
      tokenVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getJoinGameInstructionDataDecoder().decode(instruction.data),
  };
}
