/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CANCEL_GAME_DISCRIMINATOR = new Uint8Array([
  121, 194, 154, 118, 103, 235, 149, 52,
]);

export function getCancelGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CANCEL_GAME_DISCRIMINATOR);
}

export type CancelGameInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TAccountGameAuthority extends string | AccountMeta<string> = string,
  TAccountTokenMint extends string | AccountMeta<string> = string,
  TAccountTokenVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountGameAuthority extends string
        ? ReadonlyAccount<TAccountGameAuthority>
        : TAccountGameAuthority,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenVault extends string
        ? WritableAccount<TAccountTokenVault>
        : TAccountTokenVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type CancelGameInstructionData = { discriminator: ReadonlyUint8Array };

export type CancelGameInstructionDataArgs = {};

export function getCancelGameInstructionDataEncoder(): FixedSizeEncoder<CancelGameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CANCEL_GAME_DISCRIMINATOR })
  );
}

export function getCancelGameInstructionDataDecoder(): FixedSizeDecoder<CancelGameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCancelGameInstructionDataCodec(): FixedSizeCodec<
  CancelGameInstructionDataArgs,
  CancelGameInstructionData
> {
  return combineCodec(
    getCancelGameInstructionDataEncoder(),
    getCancelGameInstructionDataDecoder()
  );
}

export type CancelGameAsyncInput<
  TAccountGame extends string = string,
  TAccountCreator extends string = string,
  TAccountGameAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  creator: TransactionSigner<TAccountCreator>;
  gameAuthority?: Address<TAccountGameAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  tokenVault: Address<TAccountTokenVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
};

export async function getCancelGameInstructionAsync<
  TAccountGame extends string,
  TAccountCreator extends string,
  TAccountGameAuthority extends string,
  TAccountTokenMint extends string,
  TAccountTokenVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CancelGameAsyncInput<
    TAccountGame,
    TAccountCreator,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CancelGameInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountCreator,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    gameAuthority: { value: input.gameAuthority ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.gameAuthority.value) {
    accounts.gameAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 97, 109, 101, 95, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.gameAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getCancelGameInstructionDataEncoder().encode({}),
    programAddress,
  } as CancelGameInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountCreator,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type CancelGameInput<
  TAccountGame extends string = string,
  TAccountCreator extends string = string,
  TAccountGameAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  creator: TransactionSigner<TAccountCreator>;
  gameAuthority: Address<TAccountGameAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  tokenVault: Address<TAccountTokenVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
};

export function getCancelGameInstruction<
  TAccountGame extends string,
  TAccountCreator extends string,
  TAccountGameAuthority extends string,
  TAccountTokenMint extends string,
  TAccountTokenVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CancelGameInput<
    TAccountGame,
    TAccountCreator,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CancelGameInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountCreator,
  TAccountGameAuthority,
  TAccountTokenMint,
  TAccountTokenVault,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    gameAuthority: { value: input.gameAuthority ?? null, isWritable: false },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenVault: { value: input.tokenVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.gameAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getCancelGameInstructionDataEncoder().encode({}),
    programAddress,
  } as CancelGameInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountCreator,
    TAccountGameAuthority,
    TAccountTokenMint,
    TAccountTokenVault,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type ParsedCancelGameInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    creator: TAccountMetas[1];
    gameAuthority: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenVault: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    clock: TAccountMetas[7];
  };
  data: CancelGameInstructionData;
};

export function parseCancelGameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCancelGameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      creator: getNextAccount(),
      gameAuthority: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCancelGameInstructionDataDecoder().decode(instruction.data),
  };
}
