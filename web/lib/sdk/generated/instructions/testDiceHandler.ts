/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TEST_DICE_HANDLER_DISCRIMINATOR = new Uint8Array([
  212, 231, 100, 61, 93, 111, 77, 171,
]);

export function getTestDiceHandlerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TEST_DICE_HANDLER_DISCRIMINATOR
  );
}

export type TestDiceHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountPlayerState extends string | AccountMeta<string> = string,
  TAccountPlayer extends string | AccountMeta<string> = string,
  TAccountRecentBlockhashes extends
    | string
    | AccountMeta<string> = 'SysvarRecentB1ockHashes11111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            AccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountRecentBlockhashes extends string
        ? ReadonlyAccount<TAccountRecentBlockhashes>
        : TAccountRecentBlockhashes,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type TestDiceHandlerInstructionData = {
  discriminator: ReadonlyUint8Array;
  diceRoll: Option<ReadonlyUint8Array>;
};

export type TestDiceHandlerInstructionDataArgs = {
  diceRoll: OptionOrNullable<ReadonlyUint8Array>;
};

export function getTestDiceHandlerInstructionDataEncoder(): Encoder<TestDiceHandlerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['diceRoll', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 2))],
    ]),
    (value) => ({ ...value, discriminator: TEST_DICE_HANDLER_DISCRIMINATOR })
  );
}

export function getTestDiceHandlerInstructionDataDecoder(): Decoder<TestDiceHandlerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['diceRoll', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 2))],
  ]);
}

export function getTestDiceHandlerInstructionDataCodec(): Codec<
  TestDiceHandlerInstructionDataArgs,
  TestDiceHandlerInstructionData
> {
  return combineCodec(
    getTestDiceHandlerInstructionDataEncoder(),
    getTestDiceHandlerInstructionDataDecoder()
  );
}

export type TestDiceHandlerAsyncInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountRecentBlockhashes extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState?: Address<TAccountPlayerState>;
  player: TransactionSigner<TAccountPlayer>;
  recentBlockhashes?: Address<TAccountRecentBlockhashes>;
  clock?: Address<TAccountClock>;
  diceRoll: TestDiceHandlerInstructionDataArgs['diceRoll'];
};

export async function getTestDiceHandlerInstructionAsync<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountRecentBlockhashes extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: TestDiceHandlerAsyncInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountRecentBlockhashes,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TestDiceHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountRecentBlockhashes,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    recentBlockhashes: {
      value: input.recentBlockhashes ?? null,
      isWritable: false,
    },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.playerState.value) {
    accounts.playerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.player.value)),
      ],
    });
  }
  if (!accounts.recentBlockhashes.value) {
    accounts.recentBlockhashes.value =
      'SysvarRecentB1ockHashes11111111111111111111' as Address<'SysvarRecentB1ockHashes11111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.recentBlockhashes),
      getAccountMeta(accounts.clock),
    ],
    data: getTestDiceHandlerInstructionDataEncoder().encode(
      args as TestDiceHandlerInstructionDataArgs
    ),
    programAddress,
  } as TestDiceHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountRecentBlockhashes,
    TAccountClock
  >);
}

export type TestDiceHandlerInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountRecentBlockhashes extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState: Address<TAccountPlayerState>;
  player: TransactionSigner<TAccountPlayer>;
  recentBlockhashes?: Address<TAccountRecentBlockhashes>;
  clock?: Address<TAccountClock>;
  diceRoll: TestDiceHandlerInstructionDataArgs['diceRoll'];
};

export function getTestDiceHandlerInstruction<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountRecentBlockhashes extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: TestDiceHandlerInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountRecentBlockhashes,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): TestDiceHandlerInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountPlayerState,
  TAccountPlayer,
  TAccountRecentBlockhashes,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    recentBlockhashes: {
      value: input.recentBlockhashes ?? null,
      isWritable: false,
    },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.recentBlockhashes.value) {
    accounts.recentBlockhashes.value =
      'SysvarRecentB1ockHashes11111111111111111111' as Address<'SysvarRecentB1ockHashes11111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.recentBlockhashes),
      getAccountMeta(accounts.clock),
    ],
    data: getTestDiceHandlerInstructionDataEncoder().encode(
      args as TestDiceHandlerInstructionDataArgs
    ),
    programAddress,
  } as TestDiceHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountRecentBlockhashes,
    TAccountClock
  >);
}

export type ParsedTestDiceHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    playerState: TAccountMetas[1];
    player: TAccountMetas[2];
    recentBlockhashes: TAccountMetas[3];
    clock: TAccountMetas[4];
  };
  data: TestDiceHandlerInstructionData;
};

export function parseTestDiceHandlerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTestDiceHandlerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      playerState: getNextAccount(),
      player: getNextAccount(),
      recentBlockhashes: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getTestDiceHandlerInstructionDataDecoder().decode(instruction.data),
  };
}
