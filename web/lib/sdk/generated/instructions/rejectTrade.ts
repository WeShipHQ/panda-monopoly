/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REJECT_TRADE_DISCRIMINATOR = new Uint8Array([
  147, 133, 74, 223, 57, 232, 76, 80,
]);

export function getRejectTradeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REJECT_TRADE_DISCRIMINATOR
  );
}

export type RejectTradeInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountTrade extends string | AccountMeta<string> = string,
  TAccountRejecter extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTrade extends string
        ? WritableAccount<TAccountTrade>
        : TAccountTrade,
      TAccountRejecter extends string
        ? WritableSignerAccount<TAccountRejecter> &
            AccountSignerMeta<TAccountRejecter>
        : TAccountRejecter,
      ...TRemainingAccounts,
    ]
  >;

export type RejectTradeInstructionData = { discriminator: ReadonlyUint8Array };

export type RejectTradeInstructionDataArgs = {};

export function getRejectTradeInstructionDataEncoder(): FixedSizeEncoder<RejectTradeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REJECT_TRADE_DISCRIMINATOR })
  );
}

export function getRejectTradeInstructionDataDecoder(): FixedSizeDecoder<RejectTradeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRejectTradeInstructionDataCodec(): FixedSizeCodec<
  RejectTradeInstructionDataArgs,
  RejectTradeInstructionData
> {
  return combineCodec(
    getRejectTradeInstructionDataEncoder(),
    getRejectTradeInstructionDataDecoder()
  );
}

export type RejectTradeInput<
  TAccountTrade extends string = string,
  TAccountRejecter extends string = string,
> = {
  trade: Address<TAccountTrade>;
  rejecter: TransactionSigner<TAccountRejecter>;
};

export function getRejectTradeInstruction<
  TAccountTrade extends string,
  TAccountRejecter extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: RejectTradeInput<TAccountTrade, TAccountRejecter>,
  config?: { programAddress?: TProgramAddress }
): RejectTradeInstruction<TProgramAddress, TAccountTrade, TAccountRejecter> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    trade: { value: input.trade ?? null, isWritable: true },
    rejecter: { value: input.rejecter ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.trade),
      getAccountMeta(accounts.rejecter),
    ],
    data: getRejectTradeInstructionDataEncoder().encode({}),
    programAddress,
  } as RejectTradeInstruction<
    TProgramAddress,
    TAccountTrade,
    TAccountRejecter
  >);
}

export type ParsedRejectTradeInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    trade: TAccountMetas[0];
    rejecter: TAccountMetas[1];
  };
  data: RejectTradeInstructionData;
};

export function parseRejectTradeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRejectTradeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { trade: getNextAccount(), rejecter: getNextAccount() },
    data: getRejectTradeInstructionDataDecoder().decode(instruction.data),
  };
}
