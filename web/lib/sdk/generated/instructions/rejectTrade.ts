/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REJECT_TRADE_DISCRIMINATOR = new Uint8Array([
  147, 133, 74, 223, 57, 232, 76, 80,
]);

export function getRejectTradeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REJECT_TRADE_DISCRIMINATOR
  );
}

export type RejectTradeInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountRejecterState extends string | AccountMeta<string> = string,
  TAccountRejecter extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountRejecterState extends string
        ? WritableAccount<TAccountRejecterState>
        : TAccountRejecterState,
      TAccountRejecter extends string
        ? WritableSignerAccount<TAccountRejecter> &
            AccountSignerMeta<TAccountRejecter>
        : TAccountRejecter,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type RejectTradeInstructionData = {
  discriminator: ReadonlyUint8Array;
  tradeId: number;
};

export type RejectTradeInstructionDataArgs = { tradeId: number };

export function getRejectTradeInstructionDataEncoder(): FixedSizeEncoder<RejectTradeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tradeId', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REJECT_TRADE_DISCRIMINATOR })
  );
}

export function getRejectTradeInstructionDataDecoder(): FixedSizeDecoder<RejectTradeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tradeId', getU8Decoder()],
  ]);
}

export function getRejectTradeInstructionDataCodec(): FixedSizeCodec<
  RejectTradeInstructionDataArgs,
  RejectTradeInstructionData
> {
  return combineCodec(
    getRejectTradeInstructionDataEncoder(),
    getRejectTradeInstructionDataDecoder()
  );
}

export type RejectTradeInput<
  TAccountGame extends string = string,
  TAccountRejecterState extends string = string,
  TAccountRejecter extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  rejecterState: Address<TAccountRejecterState>;
  rejecter: TransactionSigner<TAccountRejecter>;
  clock?: Address<TAccountClock>;
  tradeId: RejectTradeInstructionDataArgs['tradeId'];
};

export function getRejectTradeInstruction<
  TAccountGame extends string,
  TAccountRejecterState extends string,
  TAccountRejecter extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: RejectTradeInput<
    TAccountGame,
    TAccountRejecterState,
    TAccountRejecter,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): RejectTradeInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountRejecterState,
  TAccountRejecter,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    rejecterState: { value: input.rejecterState ?? null, isWritable: true },
    rejecter: { value: input.rejecter ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.rejecterState),
      getAccountMeta(accounts.rejecter),
      getAccountMeta(accounts.clock),
    ],
    data: getRejectTradeInstructionDataEncoder().encode(
      args as RejectTradeInstructionDataArgs
    ),
    programAddress,
  } as RejectTradeInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountRejecterState,
    TAccountRejecter,
    TAccountClock
  >);
}

export type ParsedRejectTradeInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    rejecterState: TAccountMetas[1];
    rejecter: TAccountMetas[2];
    clock: TAccountMetas[3];
  };
  data: RejectTradeInstructionData;
};

export function parseRejectTradeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRejectTradeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      rejecterState: getNextAccount(),
      rejecter: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getRejectTradeInstructionDataDecoder().decode(instruction.data),
  };
}
