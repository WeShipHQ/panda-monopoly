/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const PAY_RENT_V2_DISCRIMINATOR = new Uint8Array([
  246, 75, 229, 52, 137, 161, 64, 64,
]);

export function getPayRentV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PAY_RENT_V2_DISCRIMINATOR);
}

export type PayRentV2Instruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountPayerState extends string | AccountMeta<string> = string,
  TAccountOwnerState extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountPropertyOwner extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountPayerState extends string
        ? WritableAccount<TAccountPayerState>
        : TAccountPayerState,
      TAccountOwnerState extends string
        ? WritableAccount<TAccountOwnerState>
        : TAccountOwnerState,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountPropertyOwner extends string
        ? ReadonlyAccount<TAccountPropertyOwner>
        : TAccountPropertyOwner,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type PayRentV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  position: number;
};

export type PayRentV2InstructionDataArgs = { position: number };

export function getPayRentV2InstructionDataEncoder(): FixedSizeEncoder<PayRentV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['position', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PAY_RENT_V2_DISCRIMINATOR })
  );
}

export function getPayRentV2InstructionDataDecoder(): FixedSizeDecoder<PayRentV2InstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['position', getU8Decoder()],
  ]);
}

export function getPayRentV2InstructionDataCodec(): FixedSizeCodec<
  PayRentV2InstructionDataArgs,
  PayRentV2InstructionData
> {
  return combineCodec(
    getPayRentV2InstructionDataEncoder(),
    getPayRentV2InstructionDataDecoder()
  );
}

export type PayRentV2AsyncInput<
  TAccountGame extends string = string,
  TAccountPayerState extends string = string,
  TAccountOwnerState extends string = string,
  TAccountPayer extends string = string,
  TAccountPropertyOwner extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  payerState?: Address<TAccountPayerState>;
  ownerState?: Address<TAccountOwnerState>;
  payer: TransactionSigner<TAccountPayer>;
  propertyOwner: Address<TAccountPropertyOwner>;
  clock?: Address<TAccountClock>;
  position: PayRentV2InstructionDataArgs['position'];
};

export async function getPayRentV2InstructionAsync<
  TAccountGame extends string,
  TAccountPayerState extends string,
  TAccountOwnerState extends string,
  TAccountPayer extends string,
  TAccountPropertyOwner extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: PayRentV2AsyncInput<
    TAccountGame,
    TAccountPayerState,
    TAccountOwnerState,
    TAccountPayer,
    TAccountPropertyOwner,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PayRentV2Instruction<
    TProgramAddress,
    TAccountGame,
    TAccountPayerState,
    TAccountOwnerState,
    TAccountPayer,
    TAccountPropertyOwner,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    payerState: { value: input.payerState ?? null, isWritable: true },
    ownerState: { value: input.ownerState ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    propertyOwner: { value: input.propertyOwner ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.payerState.value) {
    accounts.payerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
      ],
    });
  }
  if (!accounts.ownerState.value) {
    accounts.ownerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.propertyOwner.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.payerState),
      getAccountMeta(accounts.ownerState),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.propertyOwner),
      getAccountMeta(accounts.clock),
    ],
    data: getPayRentV2InstructionDataEncoder().encode(
      args as PayRentV2InstructionDataArgs
    ),
    programAddress,
  } as PayRentV2Instruction<
    TProgramAddress,
    TAccountGame,
    TAccountPayerState,
    TAccountOwnerState,
    TAccountPayer,
    TAccountPropertyOwner,
    TAccountClock
  >);
}

export type PayRentV2Input<
  TAccountGame extends string = string,
  TAccountPayerState extends string = string,
  TAccountOwnerState extends string = string,
  TAccountPayer extends string = string,
  TAccountPropertyOwner extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  payerState: Address<TAccountPayerState>;
  ownerState: Address<TAccountOwnerState>;
  payer: TransactionSigner<TAccountPayer>;
  propertyOwner: Address<TAccountPropertyOwner>;
  clock?: Address<TAccountClock>;
  position: PayRentV2InstructionDataArgs['position'];
};

export function getPayRentV2Instruction<
  TAccountGame extends string,
  TAccountPayerState extends string,
  TAccountOwnerState extends string,
  TAccountPayer extends string,
  TAccountPropertyOwner extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: PayRentV2Input<
    TAccountGame,
    TAccountPayerState,
    TAccountOwnerState,
    TAccountPayer,
    TAccountPropertyOwner,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): PayRentV2Instruction<
  TProgramAddress,
  TAccountGame,
  TAccountPayerState,
  TAccountOwnerState,
  TAccountPayer,
  TAccountPropertyOwner,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    payerState: { value: input.payerState ?? null, isWritable: true },
    ownerState: { value: input.ownerState ?? null, isWritable: true },
    payer: { value: input.payer ?? null, isWritable: true },
    propertyOwner: { value: input.propertyOwner ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.payerState),
      getAccountMeta(accounts.ownerState),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.propertyOwner),
      getAccountMeta(accounts.clock),
    ],
    data: getPayRentV2InstructionDataEncoder().encode(
      args as PayRentV2InstructionDataArgs
    ),
    programAddress,
  } as PayRentV2Instruction<
    TProgramAddress,
    TAccountGame,
    TAccountPayerState,
    TAccountOwnerState,
    TAccountPayer,
    TAccountPropertyOwner,
    TAccountClock
  >);
}

export type ParsedPayRentV2Instruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    payerState: TAccountMetas[1];
    ownerState: TAccountMetas[2];
    payer: TAccountMetas[3];
    propertyOwner: TAccountMetas[4];
    clock: TAccountMetas[5];
  };
  data: PayRentV2InstructionData;
};

export function parsePayRentV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPayRentV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      payerState: getNextAccount(),
      ownerState: getNextAccount(),
      payer: getNextAccount(),
      propertyOwner: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getPayRentV2InstructionDataDecoder().decode(instruction.data),
  };
}
