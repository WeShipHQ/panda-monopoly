/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ROLL_DICE_VRF_HANDLER_DISCRIMINATOR = new Uint8Array([
  39, 65, 195, 145, 53, 169, 192, 6,
]);

export function getRollDiceVrfHandlerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ROLL_DICE_VRF_HANDLER_DISCRIMINATOR
  );
}

export type RollDiceVrfHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountPlayerState extends string | AccountMeta<string> = string,
  TAccountPlayer extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TAccountOracleQueue extends
    | string
    | AccountMeta<string> = '5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc',
  TAccountProgramIdentity extends string | AccountMeta<string> = string,
  TAccountVrfProgram extends
    | string
    | AccountMeta<string> = 'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz',
  TAccountSlotHashes extends
    | string
    | AccountMeta<string> = 'SysvarS1otHashes111111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            AccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      TAccountOracleQueue extends string
        ? WritableAccount<TAccountOracleQueue>
        : TAccountOracleQueue,
      TAccountProgramIdentity extends string
        ? ReadonlyAccount<TAccountProgramIdentity>
        : TAccountProgramIdentity,
      TAccountVrfProgram extends string
        ? ReadonlyAccount<TAccountVrfProgram>
        : TAccountVrfProgram,
      TAccountSlotHashes extends string
        ? ReadonlyAccount<TAccountSlotHashes>
        : TAccountSlotHashes,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RollDiceVrfHandlerInstructionData = {
  discriminator: ReadonlyUint8Array;
  seed: number;
  diceRoll: Option<ReadonlyUint8Array>;
};

export type RollDiceVrfHandlerInstructionDataArgs = {
  seed: number;
  diceRoll: OptionOrNullable<ReadonlyUint8Array>;
};

export function getRollDiceVrfHandlerInstructionDataEncoder(): Encoder<RollDiceVrfHandlerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['seed', getU8Encoder()],
      ['diceRoll', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 2))],
    ]),
    (value) => ({
      ...value,
      discriminator: ROLL_DICE_VRF_HANDLER_DISCRIMINATOR,
    })
  );
}

export function getRollDiceVrfHandlerInstructionDataDecoder(): Decoder<RollDiceVrfHandlerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['seed', getU8Decoder()],
    ['diceRoll', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 2))],
  ]);
}

export function getRollDiceVrfHandlerInstructionDataCodec(): Codec<
  RollDiceVrfHandlerInstructionDataArgs,
  RollDiceVrfHandlerInstructionData
> {
  return combineCodec(
    getRollDiceVrfHandlerInstructionDataEncoder(),
    getRollDiceVrfHandlerInstructionDataDecoder()
  );
}

export type RollDiceVrfHandlerAsyncInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountClock extends string = string,
  TAccountOracleQueue extends string = string,
  TAccountProgramIdentity extends string = string,
  TAccountVrfProgram extends string = string,
  TAccountSlotHashes extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState?: Address<TAccountPlayerState>;
  player: TransactionSigner<TAccountPlayer>;
  clock?: Address<TAccountClock>;
  oracleQueue?: Address<TAccountOracleQueue>;
  programIdentity?: Address<TAccountProgramIdentity>;
  vrfProgram?: Address<TAccountVrfProgram>;
  slotHashes?: Address<TAccountSlotHashes>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: RollDiceVrfHandlerInstructionDataArgs['seed'];
  diceRoll: RollDiceVrfHandlerInstructionDataArgs['diceRoll'];
};

export async function getRollDiceVrfHandlerInstructionAsync<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountClock extends string,
  TAccountOracleQueue extends string,
  TAccountProgramIdentity extends string,
  TAccountVrfProgram extends string,
  TAccountSlotHashes extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: RollDiceVrfHandlerAsyncInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountClock,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RollDiceVrfHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountClock,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    oracleQueue: { value: input.oracleQueue ?? null, isWritable: true },
    programIdentity: {
      value: input.programIdentity ?? null,
      isWritable: false,
    },
    vrfProgram: { value: input.vrfProgram ?? null, isWritable: false },
    slotHashes: { value: input.slotHashes ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.playerState.value) {
    accounts.playerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.player.value)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.oracleQueue.value) {
    accounts.oracleQueue.value =
      '5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc' as Address<'5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc'>;
  }
  if (!accounts.programIdentity.value) {
    accounts.programIdentity.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 100, 101, 110, 116, 105, 116, 121])
        ),
      ],
    });
  }
  if (!accounts.vrfProgram.value) {
    accounts.vrfProgram.value =
      'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz' as Address<'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz'>;
  }
  if (!accounts.slotHashes.value) {
    accounts.slotHashes.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.oracleQueue),
      getAccountMeta(accounts.programIdentity),
      getAccountMeta(accounts.vrfProgram),
      getAccountMeta(accounts.slotHashes),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRollDiceVrfHandlerInstructionDataEncoder().encode(
      args as RollDiceVrfHandlerInstructionDataArgs
    ),
    programAddress,
  } as RollDiceVrfHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountClock,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >);
}

export type RollDiceVrfHandlerInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPlayer extends string = string,
  TAccountClock extends string = string,
  TAccountOracleQueue extends string = string,
  TAccountProgramIdentity extends string = string,
  TAccountVrfProgram extends string = string,
  TAccountSlotHashes extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState: Address<TAccountPlayerState>;
  player: TransactionSigner<TAccountPlayer>;
  clock?: Address<TAccountClock>;
  oracleQueue?: Address<TAccountOracleQueue>;
  programIdentity: Address<TAccountProgramIdentity>;
  vrfProgram?: Address<TAccountVrfProgram>;
  slotHashes?: Address<TAccountSlotHashes>;
  systemProgram?: Address<TAccountSystemProgram>;
  seed: RollDiceVrfHandlerInstructionDataArgs['seed'];
  diceRoll: RollDiceVrfHandlerInstructionDataArgs['diceRoll'];
};

export function getRollDiceVrfHandlerInstruction<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPlayer extends string,
  TAccountClock extends string,
  TAccountOracleQueue extends string,
  TAccountProgramIdentity extends string,
  TAccountVrfProgram extends string,
  TAccountSlotHashes extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: RollDiceVrfHandlerInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountClock,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RollDiceVrfHandlerInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountPlayerState,
  TAccountPlayer,
  TAccountClock,
  TAccountOracleQueue,
  TAccountProgramIdentity,
  TAccountVrfProgram,
  TAccountSlotHashes,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
    oracleQueue: { value: input.oracleQueue ?? null, isWritable: true },
    programIdentity: {
      value: input.programIdentity ?? null,
      isWritable: false,
    },
    vrfProgram: { value: input.vrfProgram ?? null, isWritable: false },
    slotHashes: { value: input.slotHashes ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }
  if (!accounts.oracleQueue.value) {
    accounts.oracleQueue.value =
      '5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc' as Address<'5hBR571xnXppuCPveTrctfTU7tJLSN94nq7kv7FRK5Tc'>;
  }
  if (!accounts.vrfProgram.value) {
    accounts.vrfProgram.value =
      'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz' as Address<'Vrf1RNUjXmQGjmQrQLvJHs9SNkvDJEsRVFPkfSQUwGz'>;
  }
  if (!accounts.slotHashes.value) {
    accounts.slotHashes.value =
      'SysvarS1otHashes111111111111111111111111111' as Address<'SysvarS1otHashes111111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.clock),
      getAccountMeta(accounts.oracleQueue),
      getAccountMeta(accounts.programIdentity),
      getAccountMeta(accounts.vrfProgram),
      getAccountMeta(accounts.slotHashes),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRollDiceVrfHandlerInstructionDataEncoder().encode(
      args as RollDiceVrfHandlerInstructionDataArgs
    ),
    programAddress,
  } as RollDiceVrfHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPlayer,
    TAccountClock,
    TAccountOracleQueue,
    TAccountProgramIdentity,
    TAccountVrfProgram,
    TAccountSlotHashes,
    TAccountSystemProgram
  >);
}

export type ParsedRollDiceVrfHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    playerState: TAccountMetas[1];
    player: TAccountMetas[2];
    clock: TAccountMetas[3];
    oracleQueue: TAccountMetas[4];
    programIdentity: TAccountMetas[5];
    vrfProgram: TAccountMetas[6];
    slotHashes: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: RollDiceVrfHandlerInstructionData;
};

export function parseRollDiceVrfHandlerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRollDiceVrfHandlerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      playerState: getNextAccount(),
      player: getNextAccount(),
      clock: getNextAccount(),
      oracleQueue: getNextAccount(),
      programIdentity: getNextAccount(),
      vrfProgram: getNextAccount(),
      slotHashes: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRollDiceVrfHandlerInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
