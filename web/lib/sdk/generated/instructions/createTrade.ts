/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getTradeTypeDecoder,
  getTradeTypeEncoder,
  type TradeType,
  type TradeTypeArgs,
} from '../types';

export const CREATE_TRADE_DISCRIMINATOR = new Uint8Array([
  183, 82, 24, 245, 248, 30, 204, 246,
]);

export function getCreateTradeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TRADE_DISCRIMINATOR
  );
}

export type CreateTradeInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountTrade extends string | AccountMeta<string> = string,
  TAccountProposerState extends string | AccountMeta<string> = string,
  TAccountReceiverState extends string | AccountMeta<string> = string,
  TAccountProposer extends string | AccountMeta<string> = string,
  TAccountReceiver extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountTrade extends string
        ? WritableAccount<TAccountTrade>
        : TAccountTrade,
      TAccountProposerState extends string
        ? WritableAccount<TAccountProposerState>
        : TAccountProposerState,
      TAccountReceiverState extends string
        ? ReadonlyAccount<TAccountReceiverState>
        : TAccountReceiverState,
      TAccountProposer extends string
        ? WritableSignerAccount<TAccountProposer> &
            AccountSignerMeta<TAccountProposer>
        : TAccountProposer,
      TAccountReceiver extends string
        ? ReadonlyAccount<TAccountReceiver>
        : TAccountReceiver,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTradeInstructionData = {
  discriminator: ReadonlyUint8Array;
  tradeType: TradeType;
  proposerMoney: bigint;
  receiverMoney: bigint;
  proposerProperty: Option<number>;
  receiverProperty: Option<number>;
};

export type CreateTradeInstructionDataArgs = {
  tradeType: TradeTypeArgs;
  proposerMoney: number | bigint;
  receiverMoney: number | bigint;
  proposerProperty: OptionOrNullable<number>;
  receiverProperty: OptionOrNullable<number>;
};

export function getCreateTradeInstructionDataEncoder(): Encoder<CreateTradeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tradeType', getTradeTypeEncoder()],
      ['proposerMoney', getU64Encoder()],
      ['receiverMoney', getU64Encoder()],
      ['proposerProperty', getOptionEncoder(getU8Encoder())],
      ['receiverProperty', getOptionEncoder(getU8Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_TRADE_DISCRIMINATOR })
  );
}

export function getCreateTradeInstructionDataDecoder(): Decoder<CreateTradeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tradeType', getTradeTypeDecoder()],
    ['proposerMoney', getU64Decoder()],
    ['receiverMoney', getU64Decoder()],
    ['proposerProperty', getOptionDecoder(getU8Decoder())],
    ['receiverProperty', getOptionDecoder(getU8Decoder())],
  ]);
}

export function getCreateTradeInstructionDataCodec(): Codec<
  CreateTradeInstructionDataArgs,
  CreateTradeInstructionData
> {
  return combineCodec(
    getCreateTradeInstructionDataEncoder(),
    getCreateTradeInstructionDataDecoder()
  );
}

export type CreateTradeAsyncInput<
  TAccountGame extends string = string,
  TAccountTrade extends string = string,
  TAccountProposerState extends string = string,
  TAccountReceiverState extends string = string,
  TAccountProposer extends string = string,
  TAccountReceiver extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  trade?: Address<TAccountTrade>;
  proposerState?: Address<TAccountProposerState>;
  receiverState?: Address<TAccountReceiverState>;
  proposer: TransactionSigner<TAccountProposer>;
  receiver: Address<TAccountReceiver>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
  tradeType: CreateTradeInstructionDataArgs['tradeType'];
  proposerMoney: CreateTradeInstructionDataArgs['proposerMoney'];
  receiverMoney: CreateTradeInstructionDataArgs['receiverMoney'];
  proposerProperty: CreateTradeInstructionDataArgs['proposerProperty'];
  receiverProperty: CreateTradeInstructionDataArgs['receiverProperty'];
};

export async function getCreateTradeInstructionAsync<
  TAccountGame extends string,
  TAccountTrade extends string,
  TAccountProposerState extends string,
  TAccountReceiverState extends string,
  TAccountProposer extends string,
  TAccountReceiver extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CreateTradeAsyncInput<
    TAccountGame,
    TAccountTrade,
    TAccountProposerState,
    TAccountReceiverState,
    TAccountProposer,
    TAccountReceiver,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateTradeInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountTrade,
    TAccountProposerState,
    TAccountReceiverState,
    TAccountProposer,
    TAccountReceiver,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    trade: { value: input.trade ?? null, isWritable: true },
    proposerState: { value: input.proposerState ?? null, isWritable: true },
    receiverState: { value: input.receiverState ?? null, isWritable: false },
    proposer: { value: input.proposer ?? null, isWritable: true },
    receiver: { value: input.receiver ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.trade.value) {
    accounts.trade.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([116, 114, 97, 100, 101])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.proposer.value)),
      ],
    });
  }
  if (!accounts.proposerState.value) {
    accounts.proposerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.proposer.value)),
      ],
    });
  }
  if (!accounts.receiverState.value) {
    accounts.receiverState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.receiver.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.trade),
      getAccountMeta(accounts.proposerState),
      getAccountMeta(accounts.receiverState),
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getCreateTradeInstructionDataEncoder().encode(
      args as CreateTradeInstructionDataArgs
    ),
    programAddress,
  } as CreateTradeInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountTrade,
    TAccountProposerState,
    TAccountReceiverState,
    TAccountProposer,
    TAccountReceiver,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type CreateTradeInput<
  TAccountGame extends string = string,
  TAccountTrade extends string = string,
  TAccountProposerState extends string = string,
  TAccountReceiverState extends string = string,
  TAccountProposer extends string = string,
  TAccountReceiver extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  trade: Address<TAccountTrade>;
  proposerState: Address<TAccountProposerState>;
  receiverState: Address<TAccountReceiverState>;
  proposer: TransactionSigner<TAccountProposer>;
  receiver: Address<TAccountReceiver>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
  tradeType: CreateTradeInstructionDataArgs['tradeType'];
  proposerMoney: CreateTradeInstructionDataArgs['proposerMoney'];
  receiverMoney: CreateTradeInstructionDataArgs['receiverMoney'];
  proposerProperty: CreateTradeInstructionDataArgs['proposerProperty'];
  receiverProperty: CreateTradeInstructionDataArgs['receiverProperty'];
};

export function getCreateTradeInstruction<
  TAccountGame extends string,
  TAccountTrade extends string,
  TAccountProposerState extends string,
  TAccountReceiverState extends string,
  TAccountProposer extends string,
  TAccountReceiver extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CreateTradeInput<
    TAccountGame,
    TAccountTrade,
    TAccountProposerState,
    TAccountReceiverState,
    TAccountProposer,
    TAccountReceiver,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTradeInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountTrade,
  TAccountProposerState,
  TAccountReceiverState,
  TAccountProposer,
  TAccountReceiver,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    trade: { value: input.trade ?? null, isWritable: true },
    proposerState: { value: input.proposerState ?? null, isWritable: true },
    receiverState: { value: input.receiverState ?? null, isWritable: false },
    proposer: { value: input.proposer ?? null, isWritable: true },
    receiver: { value: input.receiver ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.trade),
      getAccountMeta(accounts.proposerState),
      getAccountMeta(accounts.receiverState),
      getAccountMeta(accounts.proposer),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getCreateTradeInstructionDataEncoder().encode(
      args as CreateTradeInstructionDataArgs
    ),
    programAddress,
  } as CreateTradeInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountTrade,
    TAccountProposerState,
    TAccountReceiverState,
    TAccountProposer,
    TAccountReceiver,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type ParsedCreateTradeInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    trade: TAccountMetas[1];
    proposerState: TAccountMetas[2];
    receiverState: TAccountMetas[3];
    proposer: TAccountMetas[4];
    receiver: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    clock: TAccountMetas[7];
  };
  data: CreateTradeInstructionData;
};

export function parseCreateTradeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTradeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      trade: getNextAccount(),
      proposerState: getNextAccount(),
      receiverState: getNextAccount(),
      proposer: getNextAccount(),
      receiver: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCreateTradeInstructionDataDecoder().decode(instruction.data),
  };
}
