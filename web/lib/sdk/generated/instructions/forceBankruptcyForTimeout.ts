/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const FORCE_BANKRUPTCY_FOR_TIMEOUT_DISCRIMINATOR = new Uint8Array([
  97, 191, 182, 167, 91, 69, 239, 197,
]);

export function getForceBankruptcyForTimeoutDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FORCE_BANKRUPTCY_FOR_TIMEOUT_DISCRIMINATOR
  );
}

export type ForceBankruptcyForTimeoutInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountTimedOutPlayerState extends string | AccountMeta<string> = string,
  TAccountTimedOutPlayer extends string | AccountMeta<string> = string,
  TAccountEnforcer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountTimedOutPlayerState extends string
        ? WritableAccount<TAccountTimedOutPlayerState>
        : TAccountTimedOutPlayerState,
      TAccountTimedOutPlayer extends string
        ? WritableAccount<TAccountTimedOutPlayer>
        : TAccountTimedOutPlayer,
      TAccountEnforcer extends string
        ? WritableSignerAccount<TAccountEnforcer> &
            AccountSignerMeta<TAccountEnforcer>
        : TAccountEnforcer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type ForceBankruptcyForTimeoutInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ForceBankruptcyForTimeoutInstructionDataArgs = {};

export function getForceBankruptcyForTimeoutInstructionDataEncoder(): FixedSizeEncoder<ForceBankruptcyForTimeoutInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: FORCE_BANKRUPTCY_FOR_TIMEOUT_DISCRIMINATOR,
    })
  );
}

export function getForceBankruptcyForTimeoutInstructionDataDecoder(): FixedSizeDecoder<ForceBankruptcyForTimeoutInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getForceBankruptcyForTimeoutInstructionDataCodec(): FixedSizeCodec<
  ForceBankruptcyForTimeoutInstructionDataArgs,
  ForceBankruptcyForTimeoutInstructionData
> {
  return combineCodec(
    getForceBankruptcyForTimeoutInstructionDataEncoder(),
    getForceBankruptcyForTimeoutInstructionDataDecoder()
  );
}

export type ForceBankruptcyForTimeoutAsyncInput<
  TAccountGame extends string = string,
  TAccountTimedOutPlayerState extends string = string,
  TAccountTimedOutPlayer extends string = string,
  TAccountEnforcer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  timedOutPlayerState?: Address<TAccountTimedOutPlayerState>;
  timedOutPlayer: Address<TAccountTimedOutPlayer>;
  enforcer: TransactionSigner<TAccountEnforcer>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
};

export async function getForceBankruptcyForTimeoutInstructionAsync<
  TAccountGame extends string,
  TAccountTimedOutPlayerState extends string,
  TAccountTimedOutPlayer extends string,
  TAccountEnforcer extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: ForceBankruptcyForTimeoutAsyncInput<
    TAccountGame,
    TAccountTimedOutPlayerState,
    TAccountTimedOutPlayer,
    TAccountEnforcer,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ForceBankruptcyForTimeoutInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountTimedOutPlayerState,
    TAccountTimedOutPlayer,
    TAccountEnforcer,
    TAccountSystemProgram,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    timedOutPlayerState: {
      value: input.timedOutPlayerState ?? null,
      isWritable: true,
    },
    timedOutPlayer: { value: input.timedOutPlayer ?? null, isWritable: true },
    enforcer: { value: input.enforcer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.timedOutPlayerState.value) {
    accounts.timedOutPlayerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.timedOutPlayer.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.timedOutPlayerState),
      getAccountMeta(accounts.timedOutPlayer),
      getAccountMeta(accounts.enforcer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getForceBankruptcyForTimeoutInstructionDataEncoder().encode({}),
    programAddress,
  } as ForceBankruptcyForTimeoutInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountTimedOutPlayerState,
    TAccountTimedOutPlayer,
    TAccountEnforcer,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type ForceBankruptcyForTimeoutInput<
  TAccountGame extends string = string,
  TAccountTimedOutPlayerState extends string = string,
  TAccountTimedOutPlayer extends string = string,
  TAccountEnforcer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  timedOutPlayerState: Address<TAccountTimedOutPlayerState>;
  timedOutPlayer: Address<TAccountTimedOutPlayer>;
  enforcer: TransactionSigner<TAccountEnforcer>;
  systemProgram?: Address<TAccountSystemProgram>;
  clock?: Address<TAccountClock>;
};

export function getForceBankruptcyForTimeoutInstruction<
  TAccountGame extends string,
  TAccountTimedOutPlayerState extends string,
  TAccountTimedOutPlayer extends string,
  TAccountEnforcer extends string,
  TAccountSystemProgram extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: ForceBankruptcyForTimeoutInput<
    TAccountGame,
    TAccountTimedOutPlayerState,
    TAccountTimedOutPlayer,
    TAccountEnforcer,
    TAccountSystemProgram,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): ForceBankruptcyForTimeoutInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountTimedOutPlayerState,
  TAccountTimedOutPlayer,
  TAccountEnforcer,
  TAccountSystemProgram,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    timedOutPlayerState: {
      value: input.timedOutPlayerState ?? null,
      isWritable: true,
    },
    timedOutPlayer: { value: input.timedOutPlayer ?? null, isWritable: true },
    enforcer: { value: input.enforcer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.timedOutPlayerState),
      getAccountMeta(accounts.timedOutPlayer),
      getAccountMeta(accounts.enforcer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.clock),
    ],
    data: getForceBankruptcyForTimeoutInstructionDataEncoder().encode({}),
    programAddress,
  } as ForceBankruptcyForTimeoutInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountTimedOutPlayerState,
    TAccountTimedOutPlayer,
    TAccountEnforcer,
    TAccountSystemProgram,
    TAccountClock
  >);
}

export type ParsedForceBankruptcyForTimeoutInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    timedOutPlayerState: TAccountMetas[1];
    timedOutPlayer: TAccountMetas[2];
    enforcer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    clock: TAccountMetas[5];
  };
  data: ForceBankruptcyForTimeoutInstructionData;
};

export function parseForceBankruptcyForTimeoutInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedForceBankruptcyForTimeoutInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      timedOutPlayerState: getNextAccount(),
      timedOutPlayer: getNextAccount(),
      enforcer: getNextAccount(),
      systemProgram: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getForceBankruptcyForTimeoutInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
