/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_GAME_HANDLER_DISCRIMINATOR = new Uint8Array([
  171, 148, 141, 45, 42, 192, 182, 21,
]);

export function getCloseGameHandlerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_GAME_HANDLER_DISCRIMINATOR
  );
}

export type CloseGameHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountMagicProgram extends
    | string
    | AccountMeta<string> = 'Magic11111111111111111111111111111111111111',
  TAccountMagicContext extends
    | string
    | AccountMeta<string> = 'MagicContext1111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountMagicProgram extends string
        ? ReadonlyAccount<TAccountMagicProgram>
        : TAccountMagicProgram,
      TAccountMagicContext extends string
        ? WritableAccount<TAccountMagicContext>
        : TAccountMagicContext,
      ...TRemainingAccounts,
    ]
  >;

export type CloseGameHandlerInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseGameHandlerInstructionDataArgs = {};

export function getCloseGameHandlerInstructionDataEncoder(): FixedSizeEncoder<CloseGameHandlerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_GAME_HANDLER_DISCRIMINATOR })
  );
}

export function getCloseGameHandlerInstructionDataDecoder(): FixedSizeDecoder<CloseGameHandlerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseGameHandlerInstructionDataCodec(): FixedSizeCodec<
  CloseGameHandlerInstructionDataArgs,
  CloseGameHandlerInstructionData
> {
  return combineCodec(
    getCloseGameHandlerInstructionDataEncoder(),
    getCloseGameHandlerInstructionDataDecoder()
  );
}

export type CloseGameHandlerInput<
  TAccountGame extends string = string,
  TAccountAuthority extends string = string,
  TAccountMagicProgram extends string = string,
  TAccountMagicContext extends string = string,
> = {
  game: Address<TAccountGame>;
  authority: TransactionSigner<TAccountAuthority>;
  magicProgram?: Address<TAccountMagicProgram>;
  magicContext?: Address<TAccountMagicContext>;
};

export function getCloseGameHandlerInstruction<
  TAccountGame extends string,
  TAccountAuthority extends string,
  TAccountMagicProgram extends string,
  TAccountMagicContext extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CloseGameHandlerInput<
    TAccountGame,
    TAccountAuthority,
    TAccountMagicProgram,
    TAccountMagicContext
  >,
  config?: { programAddress?: TProgramAddress }
): CloseGameHandlerInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountAuthority,
  TAccountMagicProgram,
  TAccountMagicContext
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    magicProgram: { value: input.magicProgram ?? null, isWritable: false },
    magicContext: { value: input.magicContext ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.magicProgram.value) {
    accounts.magicProgram.value =
      'Magic11111111111111111111111111111111111111' as Address<'Magic11111111111111111111111111111111111111'>;
  }
  if (!accounts.magicContext.value) {
    accounts.magicContext.value =
      'MagicContext1111111111111111111111111111111' as Address<'MagicContext1111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.magicProgram),
      getAccountMeta(accounts.magicContext),
    ],
    data: getCloseGameHandlerInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseGameHandlerInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountAuthority,
    TAccountMagicProgram,
    TAccountMagicContext
  >);
}

export type ParsedCloseGameHandlerInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    authority: TAccountMetas[1];
    magicProgram: TAccountMetas[2];
    magicContext: TAccountMetas[3];
  };
  data: CloseGameHandlerInstructionData;
};

export function parseCloseGameHandlerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseGameHandlerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      authority: getNextAccount(),
      magicProgram: getNextAccount(),
      magicContext: getNextAccount(),
    },
    data: getCloseGameHandlerInstructionDataDecoder().decode(instruction.data),
  };
}
