/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_PLATFORM_CONFIG_DISCRIMINATOR = new Uint8Array([
  195, 60, 76, 129, 146, 45, 67, 143,
]);

export function getUpdatePlatformConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_PLATFORM_CONFIG_DISCRIMINATOR
  );
}

export type UpdatePlatformConfigInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdatePlatformConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  feeBasisPoints: Option<number>;
  feeVault: Option<Address>;
};

export type UpdatePlatformConfigInstructionDataArgs = {
  feeBasisPoints: OptionOrNullable<number>;
  feeVault: OptionOrNullable<Address>;
};

export function getUpdatePlatformConfigInstructionDataEncoder(): Encoder<UpdatePlatformConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['feeBasisPoints', getOptionEncoder(getU16Encoder())],
      ['feeVault', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: UPDATE_PLATFORM_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getUpdatePlatformConfigInstructionDataDecoder(): Decoder<UpdatePlatformConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['feeBasisPoints', getOptionDecoder(getU16Decoder())],
    ['feeVault', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getUpdatePlatformConfigInstructionDataCodec(): Codec<
  UpdatePlatformConfigInstructionDataArgs,
  UpdatePlatformConfigInstructionData
> {
  return combineCodec(
    getUpdatePlatformConfigInstructionDataEncoder(),
    getUpdatePlatformConfigInstructionDataDecoder()
  );
}

export type UpdatePlatformConfigInput<
  TAccountAdmin extends string = string,
  TAccountConfig extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  config: Address<TAccountConfig>;
  feeBasisPoints: UpdatePlatformConfigInstructionDataArgs['feeBasisPoints'];
  feeVault: UpdatePlatformConfigInstructionDataArgs['feeVault'];
};

export function getUpdatePlatformConfigInstruction<
  TAccountAdmin extends string,
  TAccountConfig extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: UpdatePlatformConfigInput<TAccountAdmin, TAccountConfig>,
  config?: { programAddress?: TProgramAddress }
): UpdatePlatformConfigInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountConfig
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.admin), getAccountMeta(accounts.config)],
    data: getUpdatePlatformConfigInstructionDataEncoder().encode(
      args as UpdatePlatformConfigInstructionDataArgs
    ),
    programAddress,
  } as UpdatePlatformConfigInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig
  >);
}

export type ParsedUpdatePlatformConfigInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    config: TAccountMetas[1];
  };
  data: UpdatePlatformConfigInstructionData;
};

export function parseUpdatePlatformConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdatePlatformConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { admin: getNextAccount(), config: getNextAccount() },
    data: getUpdatePlatformConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
