/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CALLBACK_DRAW_CHANCE_CARD_DISCRIMINATOR = new Uint8Array([
  109, 244, 66, 209, 239, 152, 209, 130,
]);

export function getCallbackDrawChanceCardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CALLBACK_DRAW_CHANCE_CARD_DISCRIMINATOR
  );
}

export type CallbackDrawChanceCardInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountVrfProgramIdentity extends
    | string
    | AccountMeta<string> = '9irBy75QS2BN81FUgXuHcjqceJJRuc9oDkAe8TKVvvAw',
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountPlayerState extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountVrfProgramIdentity extends string
        ? ReadonlySignerAccount<TAccountVrfProgramIdentity> &
            AccountSignerMeta<TAccountVrfProgramIdentity>
        : TAccountVrfProgramIdentity,
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type CallbackDrawChanceCardInstructionData = {
  discriminator: ReadonlyUint8Array;
  randomness: ReadonlyUint8Array;
};

export type CallbackDrawChanceCardInstructionDataArgs = {
  randomness: ReadonlyUint8Array;
};

export function getCallbackDrawChanceCardInstructionDataEncoder(): FixedSizeEncoder<CallbackDrawChanceCardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['randomness', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({
      ...value,
      discriminator: CALLBACK_DRAW_CHANCE_CARD_DISCRIMINATOR,
    })
  );
}

export function getCallbackDrawChanceCardInstructionDataDecoder(): FixedSizeDecoder<CallbackDrawChanceCardInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['randomness', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getCallbackDrawChanceCardInstructionDataCodec(): FixedSizeCodec<
  CallbackDrawChanceCardInstructionDataArgs,
  CallbackDrawChanceCardInstructionData
> {
  return combineCodec(
    getCallbackDrawChanceCardInstructionDataEncoder(),
    getCallbackDrawChanceCardInstructionDataDecoder()
  );
}

export type CallbackDrawChanceCardInput<
  TAccountVrfProgramIdentity extends string = string,
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountClock extends string = string,
> = {
  /**
   * This check ensure that the vrf_program_identity (which is a PDA) is a singer
   * enforcing the callback is executed by the VRF program trough CPI
   */
  vrfProgramIdentity?: TransactionSigner<TAccountVrfProgramIdentity>;
  game: Address<TAccountGame>;
  playerState: Address<TAccountPlayerState>;
  clock?: Address<TAccountClock>;
  randomness: CallbackDrawChanceCardInstructionDataArgs['randomness'];
};

export function getCallbackDrawChanceCardInstruction<
  TAccountVrfProgramIdentity extends string,
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: CallbackDrawChanceCardInput<
    TAccountVrfProgramIdentity,
    TAccountGame,
    TAccountPlayerState,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): CallbackDrawChanceCardInstruction<
  TProgramAddress,
  TAccountVrfProgramIdentity,
  TAccountGame,
  TAccountPlayerState,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    vrfProgramIdentity: {
      value: input.vrfProgramIdentity ?? null,
      isWritable: false,
    },
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vrfProgramIdentity.value) {
    accounts.vrfProgramIdentity.value =
      '9irBy75QS2BN81FUgXuHcjqceJJRuc9oDkAe8TKVvvAw' as Address<'9irBy75QS2BN81FUgXuHcjqceJJRuc9oDkAe8TKVvvAw'>;
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.vrfProgramIdentity),
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.clock),
    ],
    data: getCallbackDrawChanceCardInstructionDataEncoder().encode(
      args as CallbackDrawChanceCardInstructionDataArgs
    ),
    programAddress,
  } as CallbackDrawChanceCardInstruction<
    TProgramAddress,
    TAccountVrfProgramIdentity,
    TAccountGame,
    TAccountPlayerState,
    TAccountClock
  >);
}

export type ParsedCallbackDrawChanceCardInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * This check ensure that the vrf_program_identity (which is a PDA) is a singer
     * enforcing the callback is executed by the VRF program trough CPI
     */
    vrfProgramIdentity: TAccountMetas[0];
    game: TAccountMetas[1];
    playerState: TAccountMetas[2];
    clock: TAccountMetas[3];
  };
  data: CallbackDrawChanceCardInstructionData;
};

export function parseCallbackDrawChanceCardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCallbackDrawChanceCardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      vrfProgramIdentity: getNextAccount(),
      game: getNextAccount(),
      playerState: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getCallbackDrawChanceCardInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
