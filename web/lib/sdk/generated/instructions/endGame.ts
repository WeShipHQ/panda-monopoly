/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const END_GAME_DISCRIMINATOR = new Uint8Array([
  224, 135, 245, 99, 67, 175, 121, 252,
]);

export function getEndGameDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(END_GAME_DISCRIMINATOR);
}

export type EndGameInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type EndGameInstructionData = { discriminator: ReadonlyUint8Array };

export type EndGameInstructionDataArgs = {};

export function getEndGameInstructionDataEncoder(): FixedSizeEncoder<EndGameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: END_GAME_DISCRIMINATOR })
  );
}

export function getEndGameInstructionDataDecoder(): FixedSizeDecoder<EndGameInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getEndGameInstructionDataCodec(): FixedSizeCodec<
  EndGameInstructionDataArgs,
  EndGameInstructionData
> {
  return combineCodec(
    getEndGameInstructionDataEncoder(),
    getEndGameInstructionDataDecoder()
  );
}

export type EndGameInput<
  TAccountGame extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  clock?: Address<TAccountClock>;
};

export function getEndGameInstruction<
  TAccountGame extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: EndGameInput<TAccountGame, TAccountClock>,
  config?: { programAddress?: TProgramAddress }
): EndGameInstruction<TProgramAddress, TAccountGame, TAccountClock> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.game), getAccountMeta(accounts.clock)],
    data: getEndGameInstructionDataEncoder().encode({}),
    programAddress,
  } as EndGameInstruction<TProgramAddress, TAccountGame, TAccountClock>);
}

export type ParsedEndGameInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    clock: TAccountMetas[1];
  };
  data: EndGameInstructionData;
};

export function parseEndGameInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEndGameInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { game: getNextAccount(), clock: getNextAccount() },
    data: getEndGameInstructionDataDecoder().decode(instruction.data),
  };
}
