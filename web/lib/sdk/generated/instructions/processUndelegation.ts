/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PROCESS_UNDELEGATION_DISCRIMINATOR = new Uint8Array([
  196, 28, 41, 206, 48, 37, 51, 167,
]);

export function getProcessUndelegationDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROCESS_UNDELEGATION_DISCRIMINATOR
  );
}

export type ProcessUndelegationInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountBaseAccount extends string | AccountMeta<string> = string,
  TAccountBuffer extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBaseAccount extends string
        ? WritableAccount<TAccountBaseAccount>
        : TAccountBaseAccount,
      TAccountBuffer extends string
        ? ReadonlyAccount<TAccountBuffer>
        : TAccountBuffer,
      TAccountPayer extends string
        ? WritableAccount<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProcessUndelegationInstructionData = {
  discriminator: ReadonlyUint8Array;
  accountSeeds: Array<ReadonlyUint8Array>;
};

export type ProcessUndelegationInstructionDataArgs = {
  accountSeeds: Array<ReadonlyUint8Array>;
};

export function getProcessUndelegationInstructionDataEncoder(): Encoder<ProcessUndelegationInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'accountSeeds',
        getArrayEncoder(
          addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: PROCESS_UNDELEGATION_DISCRIMINATOR })
  );
}

export function getProcessUndelegationInstructionDataDecoder(): Decoder<ProcessUndelegationInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'accountSeeds',
      getArrayDecoder(addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())),
    ],
  ]);
}

export function getProcessUndelegationInstructionDataCodec(): Codec<
  ProcessUndelegationInstructionDataArgs,
  ProcessUndelegationInstructionData
> {
  return combineCodec(
    getProcessUndelegationInstructionDataEncoder(),
    getProcessUndelegationInstructionDataDecoder()
  );
}

export type ProcessUndelegationInput<
  TAccountBaseAccount extends string = string,
  TAccountBuffer extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  baseAccount: Address<TAccountBaseAccount>;
  buffer: Address<TAccountBuffer>;
  payer: Address<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  accountSeeds: ProcessUndelegationInstructionDataArgs['accountSeeds'];
};

export function getProcessUndelegationInstruction<
  TAccountBaseAccount extends string,
  TAccountBuffer extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: ProcessUndelegationInput<
    TAccountBaseAccount,
    TAccountBuffer,
    TAccountPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProcessUndelegationInstruction<
  TProgramAddress,
  TAccountBaseAccount,
  TAccountBuffer,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    baseAccount: { value: input.baseAccount ?? null, isWritable: true },
    buffer: { value: input.buffer ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.baseAccount),
      getAccountMeta(accounts.buffer),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getProcessUndelegationInstructionDataEncoder().encode(
      args as ProcessUndelegationInstructionDataArgs
    ),
    programAddress,
  } as ProcessUndelegationInstruction<
    TProgramAddress,
    TAccountBaseAccount,
    TAccountBuffer,
    TAccountPayer,
    TAccountSystemProgram
  >);
}

export type ParsedProcessUndelegationInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    baseAccount: TAccountMetas[0];
    buffer: TAccountMetas[1];
    payer: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: ProcessUndelegationInstructionData;
};

export function parseProcessUndelegationInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProcessUndelegationInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      baseAccount: getNextAccount(),
      buffer: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getProcessUndelegationInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
