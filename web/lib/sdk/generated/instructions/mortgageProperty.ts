/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { PANDA_MONOPOLY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MORTGAGE_PROPERTY_DISCRIMINATOR = new Uint8Array([
  62, 50, 77, 57, 145, 175, 145, 23,
]);

export function getMortgagePropertyDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MORTGAGE_PROPERTY_DISCRIMINATOR
  );
}

export type MortgagePropertyInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountGame extends string | AccountMeta<string> = string,
  TAccountPlayerState extends string | AccountMeta<string> = string,
  TAccountPropertyState extends string | AccountMeta<string> = string,
  TAccountPlayer extends string | AccountMeta<string> = string,
  TAccountClock extends
    | string
    | AccountMeta<string> = 'SysvarC1ock11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGame extends string
        ? WritableAccount<TAccountGame>
        : TAccountGame,
      TAccountPlayerState extends string
        ? WritableAccount<TAccountPlayerState>
        : TAccountPlayerState,
      TAccountPropertyState extends string
        ? WritableAccount<TAccountPropertyState>
        : TAccountPropertyState,
      TAccountPlayer extends string
        ? WritableSignerAccount<TAccountPlayer> &
            AccountSignerMeta<TAccountPlayer>
        : TAccountPlayer,
      TAccountClock extends string
        ? ReadonlyAccount<TAccountClock>
        : TAccountClock,
      ...TRemainingAccounts,
    ]
  >;

export type MortgagePropertyInstructionData = {
  discriminator: ReadonlyUint8Array;
  position: number;
};

export type MortgagePropertyInstructionDataArgs = { position: number };

export function getMortgagePropertyInstructionDataEncoder(): FixedSizeEncoder<MortgagePropertyInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['position', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MORTGAGE_PROPERTY_DISCRIMINATOR })
  );
}

export function getMortgagePropertyInstructionDataDecoder(): FixedSizeDecoder<MortgagePropertyInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['position', getU8Decoder()],
  ]);
}

export function getMortgagePropertyInstructionDataCodec(): FixedSizeCodec<
  MortgagePropertyInstructionDataArgs,
  MortgagePropertyInstructionData
> {
  return combineCodec(
    getMortgagePropertyInstructionDataEncoder(),
    getMortgagePropertyInstructionDataDecoder()
  );
}

export type MortgagePropertyAsyncInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPropertyState extends string = string,
  TAccountPlayer extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState?: Address<TAccountPlayerState>;
  propertyState?: Address<TAccountPropertyState>;
  player: TransactionSigner<TAccountPlayer>;
  clock?: Address<TAccountClock>;
  position: MortgagePropertyInstructionDataArgs['position'];
};

export async function getMortgagePropertyInstructionAsync<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPropertyState extends string,
  TAccountPlayer extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: MortgagePropertyAsyncInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPropertyState,
    TAccountPlayer,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MortgagePropertyInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPropertyState,
    TAccountPlayer,
    TAccountClock
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    propertyState: { value: input.propertyState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.playerState.value) {
    accounts.playerState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 108, 97, 121, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getAddressEncoder().encode(expectAddress(accounts.player.value)),
      ],
    });
  }
  if (!accounts.propertyState.value) {
    accounts.propertyState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 114, 111, 112, 101, 114, 116, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.game.value)),
        getU8Encoder().encode(expectSome(args.position)),
      ],
    });
  }
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.propertyState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.clock),
    ],
    data: getMortgagePropertyInstructionDataEncoder().encode(
      args as MortgagePropertyInstructionDataArgs
    ),
    programAddress,
  } as MortgagePropertyInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPropertyState,
    TAccountPlayer,
    TAccountClock
  >);
}

export type MortgagePropertyInput<
  TAccountGame extends string = string,
  TAccountPlayerState extends string = string,
  TAccountPropertyState extends string = string,
  TAccountPlayer extends string = string,
  TAccountClock extends string = string,
> = {
  game: Address<TAccountGame>;
  playerState: Address<TAccountPlayerState>;
  propertyState: Address<TAccountPropertyState>;
  player: TransactionSigner<TAccountPlayer>;
  clock?: Address<TAccountClock>;
  position: MortgagePropertyInstructionDataArgs['position'];
};

export function getMortgagePropertyInstruction<
  TAccountGame extends string,
  TAccountPlayerState extends string,
  TAccountPropertyState extends string,
  TAccountPlayer extends string,
  TAccountClock extends string,
  TProgramAddress extends Address = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
>(
  input: MortgagePropertyInput<
    TAccountGame,
    TAccountPlayerState,
    TAccountPropertyState,
    TAccountPlayer,
    TAccountClock
  >,
  config?: { programAddress?: TProgramAddress }
): MortgagePropertyInstruction<
  TProgramAddress,
  TAccountGame,
  TAccountPlayerState,
  TAccountPropertyState,
  TAccountPlayer,
  TAccountClock
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? PANDA_MONOPOLY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    game: { value: input.game ?? null, isWritable: true },
    playerState: { value: input.playerState ?? null, isWritable: true },
    propertyState: { value: input.propertyState ?? null, isWritable: true },
    player: { value: input.player ?? null, isWritable: true },
    clock: { value: input.clock ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.clock.value) {
    accounts.clock.value =
      'SysvarC1ock11111111111111111111111111111111' as Address<'SysvarC1ock11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.game),
      getAccountMeta(accounts.playerState),
      getAccountMeta(accounts.propertyState),
      getAccountMeta(accounts.player),
      getAccountMeta(accounts.clock),
    ],
    data: getMortgagePropertyInstructionDataEncoder().encode(
      args as MortgagePropertyInstructionDataArgs
    ),
    programAddress,
  } as MortgagePropertyInstruction<
    TProgramAddress,
    TAccountGame,
    TAccountPlayerState,
    TAccountPropertyState,
    TAccountPlayer,
    TAccountClock
  >);
}

export type ParsedMortgagePropertyInstruction<
  TProgram extends string = typeof PANDA_MONOPOLY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    game: TAccountMetas[0];
    playerState: TAccountMetas[1];
    propertyState: TAccountMetas[2];
    player: TAccountMetas[3];
    clock: TAccountMetas[4];
  };
  data: MortgagePropertyInstructionData;
};

export function parseMortgagePropertyInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMortgagePropertyInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      game: getNextAccount(),
      playerState: getNextAccount(),
      propertyState: getNextAccount(),
      player: getNextAccount(),
      clock: getNextAccount(),
    },
    data: getMortgagePropertyInstructionDataDecoder().decode(instruction.data),
  };
}
