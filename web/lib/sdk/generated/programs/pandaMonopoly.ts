/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAcceptTradeInstruction,
  type ParsedBuildHotelV2Instruction,
  type ParsedBuildHouseV2Instruction,
  type ParsedBuyPropertyV2Instruction,
  type ParsedCallbackDrawChanceCardInstruction,
  type ParsedCallbackDrawCommunityChestCardInstruction,
  type ParsedCallbackRollDiceInstruction,
  type ParsedCancelGameInstruction,
  type ParsedCancelTradeInstruction,
  type ParsedClaimRewardInstruction,
  type ParsedCleanupExpiredTradesInstruction,
  type ParsedCloseGameHandlerInstruction,
  type ParsedCreatePlatformConfigInstruction,
  type ParsedCreateTradeInstruction,
  type ParsedDeclareBankruptcyInstruction,
  type ParsedDeclinePropertyV2Instruction,
  type ParsedDrawChanceCardInstruction,
  type ParsedDrawCommunityChestCardInstruction,
  type ParsedEndGameInstruction,
  type ParsedEndTurnInstruction,
  type ParsedForceBankruptcyForTimeoutInstruction,
  type ParsedForceEndTurnInstruction,
  type ParsedInitializeGameInstruction,
  type ParsedJoinGameInstruction,
  type ParsedLeaveGameInstruction,
  type ParsedMortgagePropertyV2Instruction,
  type ParsedPayJailFineInstruction,
  type ParsedPayMevTaxHandlerInstruction,
  type ParsedPayPriorityFeeTaxHandlerInstruction,
  type ParsedPayRentV2Instruction,
  type ParsedProcessUndelegationInstruction,
  type ParsedRejectTradeInstruction,
  type ParsedResetGameHandlerInstruction,
  type ParsedRollDiceInstruction,
  type ParsedSellBuildingV2Instruction,
  type ParsedStartGameInstruction,
  type ParsedUndelegateGameHandlerInstruction,
  type ParsedUnmortgagePropertyV2Instruction,
  type ParsedUpdatePlatformConfigInstruction,
  type ParsedUseGetOutOfJailCardInstruction,
} from '../instructions';

export const PANDA_MONOPOLY_PROGRAM_ADDRESS =
  '4vucUqMcXN4sgLsgnrXTUC9U7ACZ5DmoRBLbWt4vrnyR' as Address<'4vucUqMcXN4sgLsgnrXTUC9U7ACZ5DmoRBLbWt4vrnyR'>;

export enum PandaMonopolyAccount {
  GameState,
  PlatformConfig,
  PlayerState,
}

export function identifyPandaMonopolyAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PandaMonopolyAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 94, 208, 172, 248, 99, 134, 120])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.GameState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 78, 128, 0, 248, 83, 230, 160])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.PlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 3, 60, 86, 174, 16, 244, 195])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.PlayerState;
  }
  throw new Error(
    'The provided account could not be identified as a pandaMonopoly account.'
  );
}

export enum PandaMonopolyInstruction {
  AcceptTrade,
  BuildHotelV2,
  BuildHouseV2,
  BuyPropertyV2,
  CallbackDrawChanceCard,
  CallbackDrawCommunityChestCard,
  CallbackRollDice,
  CancelGame,
  CancelTrade,
  ClaimReward,
  CleanupExpiredTrades,
  CloseGameHandler,
  CreatePlatformConfig,
  CreateTrade,
  DeclareBankruptcy,
  DeclinePropertyV2,
  DrawChanceCard,
  DrawCommunityChestCard,
  EndGame,
  EndTurn,
  ForceBankruptcyForTimeout,
  ForceEndTurn,
  InitializeGame,
  JoinGame,
  LeaveGame,
  MortgagePropertyV2,
  PayJailFine,
  PayMevTaxHandler,
  PayPriorityFeeTaxHandler,
  PayRentV2,
  ProcessUndelegation,
  RejectTrade,
  ResetGameHandler,
  RollDice,
  SellBuildingV2,
  StartGame,
  UndelegateGameHandler,
  UnmortgagePropertyV2,
  UpdatePlatformConfig,
  UseGetOutOfJailCard,
}

export function identifyPandaMonopolyInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PandaMonopolyInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 218, 29, 95, 124, 75, 64, 116])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.AcceptTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 86, 39, 139, 169, 142, 237, 96])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.BuildHotelV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 101, 111, 168, 249, 48, 111, 126])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.BuildHouseV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 42, 103, 199, 142, 65, 25, 181])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.BuyPropertyV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([109, 244, 66, 209, 239, 152, 209, 130])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CallbackDrawChanceCard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([54, 18, 35, 147, 213, 189, 83, 190])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CallbackDrawCommunityChestCard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 76, 217, 160, 252, 234, 19, 238])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CallbackRollDice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 194, 154, 118, 103, 235, 149, 52])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CancelGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 66, 91, 59, 175, 107, 208, 120])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CancelTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([149, 95, 181, 242, 94, 90, 158, 162])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.ClaimReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 253, 210, 8, 4, 48, 168, 107])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CleanupExpiredTrades;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 148, 141, 45, 42, 192, 182, 21])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CloseGameHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 90, 196, 175, 253, 113, 220, 20])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CreatePlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 82, 24, 245, 248, 30, 204, 246])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CreateTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 207, 255, 228, 104, 178, 50, 132])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DeclareBankruptcy;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([19, 110, 205, 24, 102, 198, 184, 133])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DeclinePropertyV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 94, 137, 232, 193, 242, 83, 212])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DrawChanceCard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 118, 197, 172, 171, 175, 39, 117])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DrawCommunityChestCard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 135, 245, 99, 67, 175, 121, 252])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.EndGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 247, 56, 118, 182, 41, 186, 237])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.EndTurn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 191, 182, 167, 91, 69, 239, 197])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.ForceBankruptcyForTimeout;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([158, 103, 163, 48, 6, 215, 138, 176])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.ForceEndTurn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([44, 62, 102, 247, 126, 208, 130, 215])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.InitializeGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 112, 18, 38, 56, 173, 60, 128])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.JoinGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([218, 226, 6, 0, 243, 34, 125, 201])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.LeaveGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([137, 149, 114, 104, 165, 44, 220, 2])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.MortgagePropertyV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 72, 206, 3, 8, 70, 76, 112])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayJailFine;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([72, 9, 102, 128, 113, 199, 253, 113])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayMevTaxHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 191, 234, 70, 98, 187, 141, 110])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayPriorityFeeTaxHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 75, 229, 52, 137, 161, 64, 64])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayRentV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 28, 41, 206, 48, 37, 51, 167])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.ProcessUndelegation;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 133, 74, 223, 57, 232, 76, 80])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.RejectTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([205, 29, 157, 88, 253, 101, 84, 100])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.ResetGameHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 140, 230, 215, 37, 178, 226, 114])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.RollDice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([153, 60, 217, 193, 99, 139, 139, 11])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.SellBuildingV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 47, 252, 172, 184, 162, 245, 14])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.StartGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 199, 172, 9, 232, 51, 195, 189])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.UndelegateGameHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 78, 195, 212, 104, 160, 85, 165])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.UnmortgagePropertyV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 60, 76, 129, 146, 45, 67, 143])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.UpdatePlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([212, 24, 245, 226, 137, 199, 25, 148])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.UseGetOutOfJailCard;
  }
  throw new Error(
    'The provided instruction could not be identified as a pandaMonopoly instruction.'
  );
}

export type ParsedPandaMonopolyInstruction<
  TProgram extends string = '4vucUqMcXN4sgLsgnrXTUC9U7ACZ5DmoRBLbWt4vrnyR',
> =
  | ({
      instructionType: PandaMonopolyInstruction.AcceptTrade;
    } & ParsedAcceptTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.BuildHotelV2;
    } & ParsedBuildHotelV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.BuildHouseV2;
    } & ParsedBuildHouseV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.BuyPropertyV2;
    } & ParsedBuyPropertyV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CallbackDrawChanceCard;
    } & ParsedCallbackDrawChanceCardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CallbackDrawCommunityChestCard;
    } & ParsedCallbackDrawCommunityChestCardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CallbackRollDice;
    } & ParsedCallbackRollDiceInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CancelGame;
    } & ParsedCancelGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CancelTrade;
    } & ParsedCancelTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.ClaimReward;
    } & ParsedClaimRewardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CleanupExpiredTrades;
    } & ParsedCleanupExpiredTradesInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CloseGameHandler;
    } & ParsedCloseGameHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CreatePlatformConfig;
    } & ParsedCreatePlatformConfigInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CreateTrade;
    } & ParsedCreateTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DeclareBankruptcy;
    } & ParsedDeclareBankruptcyInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DeclinePropertyV2;
    } & ParsedDeclinePropertyV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DrawChanceCard;
    } & ParsedDrawChanceCardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DrawCommunityChestCard;
    } & ParsedDrawCommunityChestCardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.EndGame;
    } & ParsedEndGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.EndTurn;
    } & ParsedEndTurnInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.ForceBankruptcyForTimeout;
    } & ParsedForceBankruptcyForTimeoutInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.ForceEndTurn;
    } & ParsedForceEndTurnInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.InitializeGame;
    } & ParsedInitializeGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.JoinGame;
    } & ParsedJoinGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.LeaveGame;
    } & ParsedLeaveGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.MortgagePropertyV2;
    } & ParsedMortgagePropertyV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayJailFine;
    } & ParsedPayJailFineInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayMevTaxHandler;
    } & ParsedPayMevTaxHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayPriorityFeeTaxHandler;
    } & ParsedPayPriorityFeeTaxHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayRentV2;
    } & ParsedPayRentV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.ProcessUndelegation;
    } & ParsedProcessUndelegationInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.RejectTrade;
    } & ParsedRejectTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.ResetGameHandler;
    } & ParsedResetGameHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.RollDice;
    } & ParsedRollDiceInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.SellBuildingV2;
    } & ParsedSellBuildingV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.StartGame;
    } & ParsedStartGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.UndelegateGameHandler;
    } & ParsedUndelegateGameHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.UnmortgagePropertyV2;
    } & ParsedUnmortgagePropertyV2Instruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.UpdatePlatformConfig;
    } & ParsedUpdatePlatformConfigInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.UseGetOutOfJailCard;
    } & ParsedUseGetOutOfJailCardInstruction<TProgram>);
