/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAcceptTradeInstruction,
  type ParsedAttendFestivalInstruction,
  type ParsedBuildHotelInstruction,
  type ParsedBuildHouseInstruction,
  type ParsedBuyPropertyInstruction,
  type ParsedCallbackRollDiceInstruction,
  type ParsedCancelTradeInstruction,
  type ParsedCloseGameHandlerInstruction,
  type ParsedCollectFreeParkingInstruction,
  type ParsedCreatePlatformConfigInstruction,
  type ParsedCreateTradeInstruction,
  type ParsedDeclinePropertyInstruction,
  type ParsedDrawChanceCardInstruction,
  type ParsedDrawCommunityChestCardInstruction,
  type ParsedEndTurnInstruction,
  type ParsedGoToJailInstruction,
  type ParsedInitializeGameInstruction,
  type ParsedJoinGameInstruction,
  type ParsedMortgagePropertyInstruction,
  type ParsedPayJailFineInstruction,
  type ParsedPayMevTaxHandlerInstruction,
  type ParsedPayPriorityFeeTaxHandlerInstruction,
  type ParsedPayRentInstruction,
  type ParsedRejectTradeInstruction,
  type ParsedRollDiceInstruction,
  type ParsedSellBuildingInstruction,
  type ParsedStartGameInstruction,
  type ParsedTestDiceHandlerInstruction,
  type ParsedUnmortgagePropertyInstruction,
  type ParsedUpdatePlatformConfigInstruction,
  type ParsedVisitBeachResortInstruction,
} from '../instructions';

export const PANDA_MONOPOLY_PROGRAM_ADDRESS =
  '4vucUqMcXN4sgLsgnrXTUC9U7ACZ5DmoRBLbWt4vrnyR' as Address<'4vucUqMcXN4sgLsgnrXTUC9U7ACZ5DmoRBLbWt4vrnyR'>;

export enum PandaMonopolyAccount {
  GameState,
  PlatformConfig,
  PlayerState,
  PropertyState,
  TradeState,
}

export function identifyPandaMonopolyAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PandaMonopolyAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([144, 94, 208, 172, 248, 99, 134, 120])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.GameState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 78, 128, 0, 248, 83, 230, 160])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.PlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 3, 60, 86, 174, 16, 244, 195])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.PlayerState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 94, 222, 94, 178, 10, 5, 93])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.PropertyState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([18, 152, 250, 23, 138, 87, 85, 1])
      ),
      0
    )
  ) {
    return PandaMonopolyAccount.TradeState;
  }
  throw new Error(
    'The provided account could not be identified as a pandaMonopoly account.'
  );
}

export enum PandaMonopolyInstruction {
  AcceptTrade,
  AttendFestival,
  BuildHotel,
  BuildHouse,
  BuyProperty,
  CallbackRollDice,
  CancelTrade,
  CloseGameHandler,
  CollectFreeParking,
  CreatePlatformConfig,
  CreateTrade,
  DeclineProperty,
  DrawChanceCard,
  DrawCommunityChestCard,
  EndTurn,
  GoToJail,
  InitializeGame,
  JoinGame,
  MortgageProperty,
  PayJailFine,
  PayMevTaxHandler,
  PayPriorityFeeTaxHandler,
  PayRent,
  RejectTrade,
  RollDice,
  SellBuilding,
  StartGame,
  TestDiceHandler,
  UnmortgageProperty,
  UpdatePlatformConfig,
  VisitBeachResort,
}

export function identifyPandaMonopolyInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PandaMonopolyInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 218, 29, 95, 124, 75, 64, 116])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.AcceptTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 226, 182, 147, 161, 173, 227, 152])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.AttendFestival;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([225, 191, 223, 204, 121, 233, 6, 174])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.BuildHotel;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 228, 252, 83, 54, 3, 25, 48])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.BuildHouse;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 136, 62, 184, 252, 187, 128, 130])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.BuyProperty;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 76, 217, 160, 252, 234, 19, 238])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CallbackRollDice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 66, 91, 59, 175, 107, 208, 120])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CancelTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([171, 148, 141, 45, 42, 192, 182, 21])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CloseGameHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([134, 219, 194, 3, 42, 240, 237, 196])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CollectFreeParking;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 90, 196, 175, 253, 113, 220, 20])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CreatePlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 82, 24, 245, 248, 30, 204, 246])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.CreateTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 79, 198, 116, 170, 10, 2, 84])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DeclineProperty;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 94, 137, 232, 193, 242, 83, 212])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DrawChanceCard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([33, 118, 197, 172, 171, 175, 39, 117])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.DrawCommunityChestCard;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 247, 56, 118, 182, 41, 186, 237])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.EndTurn;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([188, 39, 17, 2, 222, 137, 233, 11])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.GoToJail;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([44, 62, 102, 247, 126, 208, 130, 215])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.InitializeGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 112, 18, 38, 56, 173, 60, 128])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.JoinGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 50, 77, 57, 145, 175, 145, 23])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.MortgageProperty;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 72, 206, 3, 8, 70, 76, 112])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayJailFine;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([72, 9, 102, 128, 113, 199, 253, 113])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayMevTaxHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 191, 234, 70, 98, 187, 141, 110])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayPriorityFeeTaxHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 155, 112, 183, 178, 234, 94, 100])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.PayRent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 133, 74, 223, 57, 232, 76, 80])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.RejectTrade;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 140, 230, 215, 37, 178, 226, 114])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.RollDice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([81, 56, 161, 40, 97, 140, 191, 123])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.SellBuilding;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([249, 47, 252, 172, 184, 162, 245, 14])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.StartGame;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([212, 231, 100, 61, 93, 111, 77, 171])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.TestDiceHandler;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([124, 75, 197, 122, 28, 42, 31, 205])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.UnmortgageProperty;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 60, 76, 129, 146, 45, 67, 143])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.UpdatePlatformConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 144, 200, 42, 23, 132, 255, 15])
      ),
      0
    )
  ) {
    return PandaMonopolyInstruction.VisitBeachResort;
  }
  throw new Error(
    'The provided instruction could not be identified as a pandaMonopoly instruction.'
  );
}

export type ParsedPandaMonopolyInstruction<
  TProgram extends string = '4vucUqMcXN4sgLsgnrXTUC9U7ACZ5DmoRBLbWt4vrnyR',
> =
  | ({
      instructionType: PandaMonopolyInstruction.AcceptTrade;
    } & ParsedAcceptTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.AttendFestival;
    } & ParsedAttendFestivalInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.BuildHotel;
    } & ParsedBuildHotelInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.BuildHouse;
    } & ParsedBuildHouseInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.BuyProperty;
    } & ParsedBuyPropertyInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CallbackRollDice;
    } & ParsedCallbackRollDiceInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CancelTrade;
    } & ParsedCancelTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CloseGameHandler;
    } & ParsedCloseGameHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CollectFreeParking;
    } & ParsedCollectFreeParkingInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CreatePlatformConfig;
    } & ParsedCreatePlatformConfigInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.CreateTrade;
    } & ParsedCreateTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DeclineProperty;
    } & ParsedDeclinePropertyInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DrawChanceCard;
    } & ParsedDrawChanceCardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.DrawCommunityChestCard;
    } & ParsedDrawCommunityChestCardInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.EndTurn;
    } & ParsedEndTurnInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.GoToJail;
    } & ParsedGoToJailInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.InitializeGame;
    } & ParsedInitializeGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.JoinGame;
    } & ParsedJoinGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.MortgageProperty;
    } & ParsedMortgagePropertyInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayJailFine;
    } & ParsedPayJailFineInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayMevTaxHandler;
    } & ParsedPayMevTaxHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayPriorityFeeTaxHandler;
    } & ParsedPayPriorityFeeTaxHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.PayRent;
    } & ParsedPayRentInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.RejectTrade;
    } & ParsedRejectTradeInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.RollDice;
    } & ParsedRollDiceInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.SellBuilding;
    } & ParsedSellBuildingInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.StartGame;
    } & ParsedStartGameInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.TestDiceHandler;
    } & ParsedTestDiceHandlerInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.UnmortgageProperty;
    } & ParsedUnmortgagePropertyInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.UpdatePlatformConfig;
    } & ParsedUpdatePlatformConfigInstruction<TProgram>)
  | ({
      instructionType: PandaMonopolyInstruction.VisitBeachResort;
    } & ParsedVisitBeachResortInstruction<TProgram>);
